
DoAnVXL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006474  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08006588  08006588  00016588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006868  08006868  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006868  08006868  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  08006a4c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006a4c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa17  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c6  00000000  00000000  0002fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00031fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00032f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000156f6  00000000  00000000  00033db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bee5  00000000  00000000  000494a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074e63  00000000  00000000  0005538b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca1ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  000ca26c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800656c 	.word	0x0800656c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800656c 	.word	0x0800656c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <User_Button_Up>:
//uint8_t User_Button_countUp = 0;
//uint8_t User_Button_countMode=0;
//uint8_t User_Button_countOK=0;

int User_Button_Up()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(Up_GPIO_Port, Up_Pin)==0)
 8000aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <User_Button_Up+0x38>)
 8000aa6:	f001 fbcb 	bl	8002240 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10c      	bne.n	8000aca <User_Button_Up+0x2e>
	{
		HAL_Delay(20);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f001 f8c5 	bl	8001c40 <HAL_Delay>
		if(HAL_GPIO_ReadPin(Up_GPIO_Port, Up_Pin)==0)
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <User_Button_Up+0x38>)
 8000abc:	f001 fbc0 	bl	8002240 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <User_Button_Up+0x32>
		{
			return 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e001      	b.n	8000ace <User_Button_Up+0x32>

		}

	}
	else return 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e7ff      	b.n	8000ace <User_Button_Up+0x32>
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <User_GLCD_GotoXY>:
	HAL_GPIO_TogglePin(DB6_GPIO_Port, DB6_Pin);
	HAL_GPIO_TogglePin(DB7_GPIO_Port, DB7_Pin);
	HAL_Delay(delay);
}
void User_GLCD_GotoXY(uint8_t x,uint8_t y)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
   switch(y)
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d826      	bhi.n	8000b3c <User_GLCD_GotoXY+0x64>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <User_GLCD_GotoXY+0x1c>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b05 	.word	0x08000b05
 8000af8:	08000b13 	.word	0x08000b13
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b2f 	.word	0x08000b2f
   {
      case 0:
      User_GLCD_SendCommand(GLCD_Line0+x);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	3b80      	subs	r3, #128	; 0x80
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f852 	bl	8000bb4 <User_GLCD_SendCommand>
      break;
 8000b10:	e014      	b.n	8000b3c <User_GLCD_GotoXY+0x64>
      case 1:
      User_GLCD_SendCommand(GLCD_Line1+x);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3b70      	subs	r3, #112	; 0x70
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f84b 	bl	8000bb4 <User_GLCD_SendCommand>
      break;
 8000b1e:	e00d      	b.n	8000b3c <User_GLCD_GotoXY+0x64>
      case 2:
      User_GLCD_SendCommand(GLCD_Line2+x);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	3b78      	subs	r3, #120	; 0x78
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f844 	bl	8000bb4 <User_GLCD_SendCommand>
      break;
 8000b2c:	e006      	b.n	8000b3c <User_GLCD_GotoXY+0x64>
      case 3:
      User_GLCD_SendCommand(GLCD_Line3+x);
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	3b68      	subs	r3, #104	; 0x68
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f83d 	bl	8000bb4 <User_GLCD_SendCommand>
      break;
 8000b3a:	bf00      	nop
   }
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <User_GLCD_ShowString>:
void User_GLCD_ShowString(uint8_t x,uint8_t y,char *DataString)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	603a      	str	r2, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	460b      	mov	r3, r1
 8000b52:	71bb      	strb	r3, [r7, #6]
   User_GLCD_GotoXY(x,y);
 8000b54:	79ba      	ldrb	r2, [r7, #6]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffbc 	bl	8000ad8 <User_GLCD_GotoXY>
   uint8_t i=0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
      while(DataString[i] !=0) // NEU NOI DUNG CUA CHUOI KHAC NULL
 8000b64:	e009      	b.n	8000b7a <User_GLCD_ShowString+0x36>
      {
         User_GLCD_SendData(DataString[i]);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f8a0 	bl	8000cb4 <User_GLCD_SendData>
         i++;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
      while(DataString[i] !=0) // NEU NOI DUNG CUA CHUOI KHAC NULL
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1ef      	bne.n	8000b66 <User_GLCD_ShowString+0x22>

      }
      while(i<16)
 8000b86:	e00e      	b.n	8000ba6 <User_GLCD_ShowString+0x62>
      {
          DataString[i]=' ';
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	2220      	movs	r2, #32
 8000b90:	701a      	strb	r2, [r3, #0]
         User_GLCD_SendData(DataString[i]);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f88a 	bl	8000cb4 <User_GLCD_SendData>
         i++;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
      while(i<16)
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d9ed      	bls.n	8000b88 <User_GLCD_ShowString+0x44>
      }

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <User_GLCD_SendCommand>:

void User_GLCD_SendCommand(uint8_t Command)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	483a      	ldr	r0, [pc, #232]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000bc4:	f001 fb53 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	4837      	ldr	r0, [pc, #220]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000bce:	f001 fb4e 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4835      	ldr	r0, [pc, #212]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000bd8:	f001 fb49 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port,DB4_Pin,Command & 0x10);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bea:	4830      	ldr	r0, [pc, #192]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000bec:	f001 fb3f 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port,DB5_Pin,Command & 0x20);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	482b      	ldr	r0, [pc, #172]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000bfe:	f001 fb36 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port,DB6_Pin,Command & 0x40);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c10:	f001 fb2d 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port,DB7_Pin,Command & 0x80);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <User_GLCD_SendCommand+0xfc>)
 8000c22:	f001 fb24 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c2c:	f001 fb1f 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2108      	movs	r1, #8
 8000c34:	481d      	ldr	r0, [pc, #116]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c36:	f001 fb1a 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	481b      	ldr	r0, [pc, #108]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c40:	f001 fb15 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port,DB4_Pin,Command & 0x01);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c54:	f001 fb0b 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port,DB5_Pin,Command & 0x02);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	2102      	movs	r1, #2
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c66:	f001 fb02 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port,DB6_Pin,Command & 0x04);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	2101      	movs	r1, #1
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c78:	f001 faf9 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port,DB7_Pin,Command & 0x08);
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <User_GLCD_SendCommand+0xfc>)
 8000c8a:	f001 faf0 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c94:	f001 faeb 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <User_GLCD_SendCommand+0xf8>)
 8000c9e:	f001 fae6 	bl	800226e <HAL_GPIO_WritePin>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <User_GLCD_SendData>:
void User_GLCD_SendData(uint8_t Data)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	483a      	ldr	r0, [pc, #232]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000cc4:	f001 fad3 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4837      	ldr	r0, [pc, #220]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000cce:	f001 face 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4835      	ldr	r0, [pc, #212]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000cd8:	f001 fac9 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port,DB4_Pin,Data & 0x10);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cea:	4830      	ldr	r0, [pc, #192]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000cec:	f001 fabf 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port,DB5_Pin,Data & 0x20);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	482b      	ldr	r0, [pc, #172]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000cfe:	f001 fab6 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port,DB6_Pin,Data & 0x40);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4827      	ldr	r0, [pc, #156]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d10:	f001 faad 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port,DB7_Pin,Data & 0x80);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4823      	ldr	r0, [pc, #140]	; (8000db0 <User_GLCD_SendData+0xfc>)
 8000d22:	f001 faa4 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d2c:	f001 fa9f 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2108      	movs	r1, #8
 8000d34:	481d      	ldr	r0, [pc, #116]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d36:	f001 fa9a 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d40:	f001 fa95 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_GPIO_Port,DB4_Pin,Data & 0x01);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	4816      	ldr	r0, [pc, #88]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d54:	f001 fa8b 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_GPIO_Port,DB5_Pin,Data & 0x02);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	2102      	movs	r1, #2
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d66:	f001 fa82 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_GPIO_Port,DB6_Pin,Data & 0x04);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	2101      	movs	r1, #1
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d78:	f001 fa79 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB7_GPIO_Port,DB7_Pin,Data & 0x08);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <User_GLCD_SendData+0xfc>)
 8000d8a:	f001 fa70 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2108      	movs	r1, #8
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d94:	f001 fa6b 	bl	800226e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS_GPIO_Port,RS_Pin,0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <User_GLCD_SendData+0xf8>)
 8000d9e:	f001 fa66 	bl	800226e <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010800 	.word	0x40010800

08000db4 <User_GLCD_Init>:
         i++;
      }

}
void User_GLCD_Init()
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	User_GLCD_SendCommand(GLCD_Basic4Bit);
 8000db8:	2020      	movs	r0, #32
 8000dba:	f7ff fefb 	bl	8000bb4 <User_GLCD_SendCommand>
	User_GLCD_SendCommand(GLCD_DisplayOn);
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f7ff fef8 	bl	8000bb4 <User_GLCD_SendCommand>
	User_GLCD_SendCommand(GLCD_Clear);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fef5 	bl	8000bb4 <User_GLCD_SendCommand>
	HAL_Delay(20);
 8000dca:	2014      	movs	r0, #20
 8000dcc:	f000 ff38 	bl	8001c40 <HAL_Delay>
	User_GLCD_SendCommand(GLCD_Entry);
 8000dd0:	2006      	movs	r0, #6
 8000dd2:	f7ff feef 	bl	8000bb4 <User_GLCD_SendCommand>
	HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f000 ff32 	bl	8001c40 <HAL_Delay>
	strcpy(User_GLCD_DataBuffer," TruongMinhKhoa");
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <User_GLCD_Init+0xb8>)
 8000de0:	4614      	mov	r4, r2
 8000de2:	461d      	mov	r5, r3
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	6020      	str	r0, [r4, #0]
 8000de8:	6061      	str	r1, [r4, #4]
 8000dea:	60a2      	str	r2, [r4, #8]
 8000dec:	60e3      	str	r3, [r4, #12]
	User_GLCD_ShowString(0,0,User_GLCD_DataBuffer);
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fea6 	bl	8000b44 <User_GLCD_ShowString>
	strcpy(User_GLCD_DataBuffer,"   17151216");
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <User_GLCD_Init+0xbc>)
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e00:	6020      	str	r0, [r4, #0]
 8000e02:	6061      	str	r1, [r4, #4]
 8000e04:	60a2      	str	r2, [r4, #8]
	User_GLCD_ShowString(0,1,User_GLCD_DataBuffer);
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe9a 	bl	8000b44 <User_GLCD_ShowString>
	strcpy(User_GLCD_DataBuffer,"  TranThanhHai");
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <User_GLCD_Init+0xc0>)
 8000e14:	4614      	mov	r4, r2
 8000e16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e18:	6020      	str	r0, [r4, #0]
 8000e1a:	6061      	str	r1, [r4, #4]
 8000e1c:	60a2      	str	r2, [r4, #8]
 8000e1e:	881a      	ldrh	r2, [r3, #0]
 8000e20:	789b      	ldrb	r3, [r3, #2]
 8000e22:	81a2      	strh	r2, [r4, #12]
 8000e24:	73a3      	strb	r3, [r4, #14]
	User_GLCD_ShowString(0,2,User_GLCD_DataBuffer);
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e28:	2102      	movs	r1, #2
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fe8a 	bl	8000b44 <User_GLCD_ShowString>
	strcpy(User_GLCD_DataBuffer,"   17151197");
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <User_GLCD_Init+0xc4>)
 8000e34:	4614      	mov	r4, r2
 8000e36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e38:	6020      	str	r0, [r4, #0]
 8000e3a:	6061      	str	r1, [r4, #4]
 8000e3c:	60a2      	str	r2, [r4, #8]
	User_GLCD_ShowString(0,3,User_GLCD_DataBuffer);
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e40:	2103      	movs	r1, #3
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fe7e 	bl	8000b44 <User_GLCD_ShowString>
	HAL_Delay(500);
 8000e48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4c:	f000 fef8 	bl	8001c40 <HAL_Delay>
	User_ClearArrayBuffer((char*)User_GLCD_DataBuffer);
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <User_GLCD_Init+0xb4>)
 8000e52:	f000 f81d 	bl	8000e90 <User_ClearArrayBuffer>
	User_GLCD_SendCommand(GLCD_Clear);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feac 	bl	8000bb4 <User_GLCD_SendCommand>
	HAL_Delay(20);
 8000e5c:	2014      	movs	r0, #20
 8000e5e:	f000 feef 	bl	8001c40 <HAL_Delay>
}
 8000e62:	bf00      	nop
 8000e64:	bdb0      	pop	{r4, r5, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000021c 	.word	0x2000021c
 8000e6c:	08006588 	.word	0x08006588
 8000e70:	08006598 	.word	0x08006598
 8000e74:	080065a4 	.word	0x080065a4
 8000e78:	080065b4 	.word	0x080065b4

08000e7c <User_GLCD_ClearDisplay>:
	sprintf(String,"%.2f",numToConvert);
	User_GLCD_ShowStringNoXY(String);
}

void User_GLCD_ClearDisplay()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	User_GLCD_SendCommand(GLCD_Clear);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fe97 	bl	8000bb4 <User_GLCD_SendCommand>
	HAL_Delay(20);
 8000e86:	2014      	movs	r0, #20
 8000e88:	f000 feda 	bl	8001c40 <HAL_Delay>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <User_ClearArrayBuffer>:

#include "User_DoAnVXL_BASE_LIB.h"
#include <string.h>

void User_ClearArrayBuffer(char* Buffer)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<16;i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e007      	b.n	8000eae <User_ClearArrayBuffer+0x1e>
	{
		Buffer[i]=0;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<16;i++)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d9f4      	bls.n	8000e9e <User_ClearArrayBuffer+0xe>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <User_CombineFunc_UARTReceiveData_ShowOnGLCD>:
		User_GLCD_ShowStringNoXY(User_GLCD_DataBuffer);
	HAL_Delay(1); // delay to avoid get fail data
}

void User_CombineFunc_UARTReceiveData_ShowOnGLCD(uint8_t x,uint8_t y, uint8_t User_NumOfUARTBuffer,char * User_GLCD_Buffer,char * User_UARTBuffer)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
	for(uint8_t i=0;i< User_NumOfUARTBuffer;i++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e026      	b.n	8000f26 <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x68>
	{
		if(User_UARTBuffer[i]== '~')
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ee2:	d118      	bne.n	8000f16 <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x58>
		{
			User_UARTBuffer[i]= 0;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			strcpy(User_GLCD_Buffer,User_UARTBuffer);
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f003 ff65 	bl	8004dc0 <strcpy>
			for(uint8_t k=0;k<i;k++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73bb      	strb	r3, [r7, #14]
 8000efa:	e007      	b.n	8000f0c <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x4e>
			{
				*(User_UARTBuffer+i)=0;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			for(uint8_t k=0;k<i;k++)
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	73bb      	strb	r3, [r7, #14]
 8000f0c:	7bba      	ldrb	r2, [r7, #14]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3f3      	bcc.n	8000efc <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x3e>
			}
			break;
 8000f14:	e00b      	b.n	8000f2e <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x70>
		}

		User_GLCD_ShowString(0, 1, User_GLCD_Buffer);
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fe12 	bl	8000b44 <User_GLCD_ShowString>
	for(uint8_t i=0;i< User_NumOfUARTBuffer;i++)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3d4      	bcc.n	8000ed8 <User_CombineFunc_UARTReceiveData_ShowOnGLCD+0x1a>
	}


}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DS1307_Init>:
 * 							initialize the I2C bus = 1
 *
 * 							else = 0
 * 	RETVAL: none
 * */
DS1307_RESULT DS1307_Init(DS1307_Handle* handle) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]

	handle->i2c->Instance = handle->DS1307_I2Cx;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68d2      	ldr	r2, [r2, #12]
 8000f46:	601a      	str	r2, [r3, #0]
	handle->i2c->Init.ClockSpeed = handle->DS1307_CLOCK;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6892      	ldr	r2, [r2, #8]
 8000f50:	605a      	str	r2, [r3, #4]

	handle->i2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	handle->i2c->Init.OwnAddress1 = 0;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
	handle->i2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	611a      	str	r2, [r3, #16]
	//handle->i2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
	handle->i2c->Init.OwnAddress2 = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
	//handle->i2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
	//handle->i2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;

	HAL_I2C_MspInit(handle->i2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fc4f 	bl	800181c <HAL_I2C_MspInit>
	HAL_I2C_Init(handle->i2c);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f98c 	bl	80022a0 <HAL_I2C_Init>
	return DS1307_WaitUntilReady(handle);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f983 	bl	8001294 <DS1307_WaitUntilReady>
 8000f8e:	4603      	mov	r3, r0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DS1307_SetTime>:
 *
 * 	PARS: DS1307_TIME time: the time you want to store in RTC
 * 	RETVAL: none
 */
///*
DS1307_RESULT DS1307_SetTime(DS1307_Handle* handle, DS1307_TIME time) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	e883 0006 	stmia.w	r3, {r1, r2}

	if (DS1307_WaitUntilReady(handle) == DS1307_RES_OK) {
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f974 	bl	8001294 <DS1307_WaitUntilReady>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f040 8162 	bne.w	8001278 <DS1307_SetTime+0x2e0>
		uint8_t data[8];

		for (int i = 0; i < 8; i++) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	e008      	b.n	8000fcc <DS1307_SetTime+0x34>
			data[i] = 0;
 8000fba:	f107 0214 	add.w	r2, r7, #20
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	ddf3      	ble.n	8000fba <DS1307_SetTime+0x22>
		}

		data[1] |= (time.second % 10);
 8000fd2:	7d78      	ldrb	r0, [r7, #21]
 8000fd4:	7afa      	ldrb	r2, [r7, #11]
 8000fd6:	4bad      	ldr	r3, [pc, #692]	; (800128c <DS1307_SetTime+0x2f4>)
 8000fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fdc:	08d9      	lsrs	r1, r3, #3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4303      	orrs	r3, r0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	757b      	strb	r3, [r7, #21]
		data[1] |= ((time.second - (time.second % 10)) / 10) << 4;
 8000ff0:	7d7b      	ldrb	r3, [r7, #21]
 8000ff2:	b258      	sxtb	r0, r3
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	7afa      	ldrb	r2, [r7, #11]
 8000ffa:	4ba4      	ldr	r3, [pc, #656]	; (800128c <DS1307_SetTime+0x2f4>)
 8000ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8001000:	08d9      	lsrs	r1, r3, #3
 8001002:	460b      	mov	r3, r1
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	1ae3      	subs	r3, r4, r3
 8001010:	4a9f      	ldr	r2, [pc, #636]	; (8001290 <DS1307_SetTime+0x2f8>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	1092      	asrs	r2, r2, #2
 8001018:	17db      	asrs	r3, r3, #31
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4303      	orrs	r3, r0
 8001022:	b25b      	sxtb	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	757b      	strb	r3, [r7, #21]
		data[1] &= ~(1 << 7);
 8001028:	7d7b      	ldrb	r3, [r7, #21]
 800102a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102e:	b2db      	uxtb	r3, r3
 8001030:	757b      	strb	r3, [r7, #21]

		data[2] |= (time.minute % 10);
 8001032:	7db8      	ldrb	r0, [r7, #22]
 8001034:	7aba      	ldrb	r2, [r7, #10]
 8001036:	4b95      	ldr	r3, [pc, #596]	; (800128c <DS1307_SetTime+0x2f4>)
 8001038:	fba3 1302 	umull	r1, r3, r3, r2
 800103c:	08d9      	lsrs	r1, r3, #3
 800103e:	460b      	mov	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4303      	orrs	r3, r0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	75bb      	strb	r3, [r7, #22]
		data[2] |= ((time.minute - (time.minute % 10)) / 10) << 4;
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	b258      	sxtb	r0, r3
 8001054:	7abb      	ldrb	r3, [r7, #10]
 8001056:	461c      	mov	r4, r3
 8001058:	7aba      	ldrb	r2, [r7, #10]
 800105a:	4b8c      	ldr	r3, [pc, #560]	; (800128c <DS1307_SetTime+0x2f4>)
 800105c:	fba3 1302 	umull	r1, r3, r3, r2
 8001060:	08d9      	lsrs	r1, r3, #3
 8001062:	460b      	mov	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	1ae3      	subs	r3, r4, r3
 8001070:	4a87      	ldr	r2, [pc, #540]	; (8001290 <DS1307_SetTime+0x2f8>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1092      	asrs	r2, r2, #2
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4303      	orrs	r3, r0
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	75bb      	strb	r3, [r7, #22]

		data[3] |= (time.hour % 10);
 8001088:	7df8      	ldrb	r0, [r7, #23]
 800108a:	7a7a      	ldrb	r2, [r7, #9]
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <DS1307_SetTime+0x2f4>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	08d9      	lsrs	r1, r3, #3
 8001094:	460b      	mov	r3, r1
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4303      	orrs	r3, r0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	75fb      	strb	r3, [r7, #23]
		data[3] |= ((time.hour - (time.hour % 10)) / 10) << 4;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	b258      	sxtb	r0, r3
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	461c      	mov	r4, r3
 80010ae:	7a7a      	ldrb	r2, [r7, #9]
 80010b0:	4b76      	ldr	r3, [pc, #472]	; (800128c <DS1307_SetTime+0x2f4>)
 80010b2:	fba3 1302 	umull	r1, r3, r3, r2
 80010b6:	08d9      	lsrs	r1, r3, #3
 80010b8:	460b      	mov	r3, r1
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	1ae3      	subs	r3, r4, r3
 80010c6:	4a72      	ldr	r2, [pc, #456]	; (8001290 <DS1307_SetTime+0x2f8>)
 80010c8:	fb82 1203 	smull	r1, r2, r2, r3
 80010cc:	1092      	asrs	r2, r2, #2
 80010ce:	17db      	asrs	r3, r3, #31
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	4303      	orrs	r3, r0
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	75fb      	strb	r3, [r7, #23]
		data[3] &= ~(1 << 6);
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	75fb      	strb	r3, [r7, #23]

		//data[4] |= time.day;
		data[4] |= (time.day % 10);
 80010e8:	7e38      	ldrb	r0, [r7, #24]
 80010ea:	7a3a      	ldrb	r2, [r7, #8]
 80010ec:	4b67      	ldr	r3, [pc, #412]	; (800128c <DS1307_SetTime+0x2f4>)
 80010ee:	fba3 1302 	umull	r1, r3, r3, r2
 80010f2:	08d9      	lsrs	r1, r3, #3
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4303      	orrs	r3, r0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	763b      	strb	r3, [r7, #24]
		data[4] |= ((time.day - (time.day % 10)) / 10) << 4;
 8001106:	7e3b      	ldrb	r3, [r7, #24]
 8001108:	b258      	sxtb	r0, r3
 800110a:	7a3b      	ldrb	r3, [r7, #8]
 800110c:	461c      	mov	r4, r3
 800110e:	7a3a      	ldrb	r2, [r7, #8]
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <DS1307_SetTime+0x2f4>)
 8001112:	fba3 1302 	umull	r1, r3, r3, r2
 8001116:	08d9      	lsrs	r1, r3, #3
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	1ae3      	subs	r3, r4, r3
 8001126:	4a5a      	ldr	r2, [pc, #360]	; (8001290 <DS1307_SetTime+0x2f8>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1092      	asrs	r2, r2, #2
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	b25b      	sxtb	r3, r3
 8001136:	4303      	orrs	r3, r0
 8001138:	b25b      	sxtb	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	763b      	strb	r3, [r7, #24]
		//data[4] &= ~(1 << 7);

		data[5] |= (time.date % 10);
 800113e:	7e78      	ldrb	r0, [r7, #25]
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	4b52      	ldr	r3, [pc, #328]	; (800128c <DS1307_SetTime+0x2f4>)
 8001144:	fba3 1302 	umull	r1, r3, r3, r2
 8001148:	08d9      	lsrs	r1, r3, #3
 800114a:	460b      	mov	r3, r1
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4303      	orrs	r3, r0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	767b      	strb	r3, [r7, #25]
		data[5] |= ((time.date - (time.date % 10)) / 10) << 4;
 800115c:	7e7b      	ldrb	r3, [r7, #25]
 800115e:	b258      	sxtb	r0, r3
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	461c      	mov	r4, r3
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <DS1307_SetTime+0x2f4>)
 8001168:	fba3 1302 	umull	r1, r3, r3, r2
 800116c:	08d9      	lsrs	r1, r3, #3
 800116e:	460b      	mov	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	1ae3      	subs	r3, r4, r3
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <DS1307_SetTime+0x2f8>)
 800117e:	fb82 1203 	smull	r1, r2, r2, r3
 8001182:	1092      	asrs	r2, r2, #2
 8001184:	17db      	asrs	r3, r3, #31
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	b25b      	sxtb	r3, r3
 800118c:	4303      	orrs	r3, r0
 800118e:	b25b      	sxtb	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	767b      	strb	r3, [r7, #25]

		data[6] |= (time.month % 10);
 8001194:	7eb8      	ldrb	r0, [r7, #26]
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <DS1307_SetTime+0x2f4>)
 800119a:	fba3 1302 	umull	r1, r3, r3, r2
 800119e:	08d9      	lsrs	r1, r3, #3
 80011a0:	460b      	mov	r3, r1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4303      	orrs	r3, r0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	76bb      	strb	r3, [r7, #26]
		data[6] |= ((time.month - (time.month % 10)) / 10) << 4;
 80011b2:	7ebb      	ldrb	r3, [r7, #26]
 80011b4:	b258      	sxtb	r0, r3
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	461c      	mov	r4, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <DS1307_SetTime+0x2f4>)
 80011be:	fba3 1302 	umull	r1, r3, r3, r2
 80011c2:	08d9      	lsrs	r1, r3, #3
 80011c4:	460b      	mov	r3, r1
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	1ae3      	subs	r3, r4, r3
 80011d2:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <DS1307_SetTime+0x2f8>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	1092      	asrs	r2, r2, #2
 80011da:	17db      	asrs	r3, r3, #31
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4303      	orrs	r3, r0
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	76bb      	strb	r3, [r7, #26]

		data[7] |= ((time.year - 2000) % 10);
 80011ea:	7efb      	ldrb	r3, [r7, #27]
 80011ec:	b258      	sxtb	r0, r3
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <DS1307_SetTime+0x2f8>)
 80011f6:	fb83 1302 	smull	r1, r3, r3, r2
 80011fa:	1099      	asrs	r1, r3, #2
 80011fc:	17d3      	asrs	r3, r2, #31
 80011fe:	1ac9      	subs	r1, r1, r3
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	1ad1      	subs	r1, r2, r3
 800120a:	b24b      	sxtb	r3, r1
 800120c:	4303      	orrs	r3, r0
 800120e:	b25b      	sxtb	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	76fb      	strb	r3, [r7, #27]
		data[7] |= (((time.year - 2000) - ((time.year - 2000) % 10)) / 10) << 4;
 8001214:	7efb      	ldrb	r3, [r7, #27]
 8001216:	b258      	sxtb	r0, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	f5a3 64fa 	sub.w	r4, r3, #2000	; 0x7d0
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <DS1307_SetTime+0x2f8>)
 8001226:	fb83 2301 	smull	r2, r3, r3, r1
 800122a:	109a      	asrs	r2, r3, #2
 800122c:	17cb      	asrs	r3, r1, #31
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	1aca      	subs	r2, r1, r3
 800123a:	1aa3      	subs	r3, r4, r2
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <DS1307_SetTime+0x2f8>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	1092      	asrs	r2, r2, #2
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4303      	orrs	r3, r0
 800124e:	b25b      	sxtb	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	76fb      	strb	r3, [r7, #27]

		if (HAL_I2C_Master_Transmit(handle->i2c, handle->DS1307_ADDRESS, data,
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	791b      	ldrb	r3, [r3, #4]
 800125c:	b299      	uxth	r1, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f107 0214 	add.w	r2, r7, #20
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2308      	movs	r3, #8
 800126a:	f001 f941 	bl	80024f0 <HAL_I2C_Master_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <DS1307_SetTime+0x2e4>
				8, handle->TIMEOUT)) {
			return DS1307_RES_ERROR;
 8001274:	2302      	movs	r3, #2
 8001276:	e005      	b.n	8001284 <DS1307_SetTime+0x2ec>
		}
	} else {
		return DS1307_RES_TIMEOUT;
 8001278:	2301      	movs	r3, #1
 800127a:	e003      	b.n	8001284 <DS1307_SetTime+0x2ec>
	}
	return DS1307_WaitUntilReady(handle);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f809 	bl	8001294 <DS1307_WaitUntilReady>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3724      	adds	r7, #36	; 0x24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	66666667 	.word	0x66666667

08001294 <DS1307_WaitUntilReady>:
		return DS1307_RES_TIMEOUT;
	}
	return DS1307_WaitUntilReady(handle);
}

DS1307_RESULT DS1307_WaitUntilReady(DS1307_Handle* handle) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	//while(HAL_I2C_GetState(handle->i2c)!=HAL_I2C_STATE_READY);
	int time = SysTick->VAL;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <DS1307_WaitUntilReady+0x54>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	60fb      	str	r3, [r7, #12]
	while ((HAL_I2C_GetState(handle->i2c) != HAL_I2C_STATE_READY)
 80012a2:	e002      	b.n	80012aa <DS1307_WaitUntilReady+0x16>
			&& (time < handle->TIMEOUT + SysTick->VAL)) {
		time = SysTick->VAL;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <DS1307_WaitUntilReady+0x54>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	60fb      	str	r3, [r7, #12]
	while ((HAL_I2C_GetState(handle->i2c) != HAL_I2C_STATE_READY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fa1c 	bl	80026ec <HAL_I2C_GetState>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	d007      	beq.n	80012ca <DS1307_WaitUntilReady+0x36>
			&& (time < handle->TIMEOUT + SysTick->VAL)) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <DS1307_WaitUntilReady+0x54>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	441a      	add	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d8ec      	bhi.n	80012a4 <DS1307_WaitUntilReady+0x10>
	}
	if (HAL_I2C_GetState(handle->i2c) == HAL_I2C_STATE_READY) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fa0c 	bl	80026ec <HAL_I2C_GetState>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	d101      	bne.n	80012de <DS1307_WaitUntilReady+0x4a>
		return DS1307_RES_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <DS1307_WaitUntilReady+0x4c>
	} else {
		return DS1307_RES_TIMEOUT;
 80012de:	2301      	movs	r3, #1
	}
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_UART_RxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
///*
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_UART_RxCpltCallback+0x50>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11a      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x48>
	{

		User_UART_RCV[User_UART_RXIndex++]=User_UART_TempBufferData[0];
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_UART_RxCpltCallback+0x54>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	b2d1      	uxtb	r1, r2
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_UART_RxCpltCallback+0x54>)
 8001308:	7011      	strb	r1, [r2, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_UART_RxCpltCallback+0x58>)
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_UART_RxCpltCallback+0x5c>)
 8001312:	5499      	strb	r1, [r3, r2]
		if(User_UART_RXIndex==16 || User_UART_TempBufferData[0]=='~')
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_UART_RxCpltCallback+0x54>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b10      	cmp	r3, #16
 800131a:	d003      	beq.n	8001324 <HAL_UART_RxCpltCallback+0x38>
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_UART_RxCpltCallback+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b7e      	cmp	r3, #126	; 0x7e
 8001322:	d102      	bne.n	800132a <HAL_UART_RxCpltCallback+0x3e>
		{
			User_UART_RXIndex=0;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_UART_RxCpltCallback+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1,(uint8_t *)User_UART_TempBufferData, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	4905      	ldr	r1, [pc, #20]	; (8001344 <HAL_UART_RxCpltCallback+0x58>)
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <HAL_UART_RxCpltCallback+0x60>)
 8001330:	f002 fd47 	bl	8003dc2 <HAL_UART_Receive_IT>
	}
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013800 	.word	0x40013800
 8001340:	20000208 	.word	0x20000208
 8001344:	200002a4 	.word	0x200002a4
 8001348:	200001f8 	.word	0x200001f8
 800134c:	200002a8 	.word	0x200002a8

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f000 fc11 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f86b 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 f983 	bl	8001668 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001362:	f000 f8e3 	bl	800152c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001366:	f000 f955 	bl	8001614 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800136a:	f000 f89f 	bl	80014ac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,30);
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <main+0xc4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	221e      	movs	r2, #30
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001376:	2100      	movs	r1, #0
 8001378:	4826      	ldr	r0, [pc, #152]	; (8001414 <main+0xc4>)
 800137a:	f002 f83d 	bl	80033f8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1,(uint8_t*)User_UART_TempBufferData, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	4925      	ldr	r1, [pc, #148]	; (8001418 <main+0xc8>)
 8001382:	4826      	ldr	r0, [pc, #152]	; (800141c <main+0xcc>)
 8001384:	f002 fd1d 	bl	8003dc2 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart1,(uint8_t*)User_UART_RCV, 16);
  User_GLCD_Init();
 8001388:	f7ff fd14 	bl	8000db4 <User_GLCD_Init>
  if(DS1307_Init(&User_DS1307_Handle)==DS1307_RES_OK)
 800138c:	4824      	ldr	r0, [pc, #144]	; (8001420 <main+0xd0>)
 800138e:	f7ff fdd2 	bl	8000f36 <DS1307_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d115      	bne.n	80013c4 <main+0x74>
  {
	  User_DS_Time.second=45;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <main+0xd4>)
 800139a:	222d      	movs	r2, #45	; 0x2d
 800139c:	71da      	strb	r2, [r3, #7]
	  User_DS_Time.minute=19;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <main+0xd4>)
 80013a0:	2213      	movs	r2, #19
 80013a2:	719a      	strb	r2, [r3, #6]
	  User_DS_Time.hour=11;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <main+0xd4>)
 80013a6:	220b      	movs	r2, #11
 80013a8:	715a      	strb	r2, [r3, #5]
	  User_DS_Time.day=3;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <main+0xd4>)
 80013ac:	2203      	movs	r2, #3
 80013ae:	711a      	strb	r2, [r3, #4]
	  User_DS_Time.date=11;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <main+0xd4>)
 80013b2:	220b      	movs	r2, #11
 80013b4:	70da      	strb	r2, [r3, #3]
	  User_DS_Time.month=8;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <main+0xd4>)
 80013b8:	2208      	movs	r2, #8
 80013ba:	709a      	strb	r2, [r3, #2]
	  User_DS_Time.year=2020;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <main+0xd4>)
 80013be:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80013c2:	801a      	strh	r2, [r3, #0]

  }
  DS1307_SetTime(&User_DS1307_Handle, User_DS_Time);
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <main+0xd4>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2100      	movs	r1, #0
 80013ca:	4611      	mov	r1, r2
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <main+0xd0>)
 80013d4:	f7ff fde0 	bl	8000f98 <DS1307_SetTime>
  {


//	  /*

	  if(strcmp(User_UART_RCV,"MCUGetCmd")==0)
 80013d8:	4913      	ldr	r1, [pc, #76]	; (8001428 <main+0xd8>)
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <main+0xdc>)
 80013dc:	f7fe feb8 	bl	8000150 <strcmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d110      	bne.n	8001408 <main+0xb8>
	  {
		  User_GLCD_ClearDisplay();
 80013e6:	f7ff fd49 	bl	8000e7c <User_GLCD_ClearDisplay>
		  User_ClearArrayBuffer(User_GLCD_DataBuffer);
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <main+0xe0>)
 80013ec:	f7ff fd50 	bl	8000e90 <User_ClearArrayBuffer>
		  User_ClearArrayBuffer(User_UART_RCV);
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <main+0xdc>)
 80013f2:	f7ff fd4d 	bl	8000e90 <User_ClearArrayBuffer>
		  while(1)
		  {
			  User_CombineFunc_UARTReceiveData_ShowOnGLCD(0,1,16,(char*)User_GLCD_DataBuffer, (char*)User_UART_RCV);
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <main+0xdc>)
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <main+0xe0>)
 80013fc:	2210      	movs	r2, #16
 80013fe:	2101      	movs	r1, #1
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fd5c 	bl	8000ebe <User_CombineFunc_UARTReceiveData_ShowOnGLCD>
		  {
 8001406:	e7f6      	b.n	80013f6 <main+0xa6>
		  }
	  }
	  else
	  {
		  User_ClearArrayBuffer(User_UART_RCV);
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <main+0xdc>)
 800140a:	f7ff fd41 	bl	8000e90 <User_ClearArrayBuffer>
		  	  Run_while();
 800140e:	f000 f9a9 	bl	8001764 <Run_while>
	  if(strcmp(User_UART_RCV,"MCUGetCmd")==0)
 8001412:	e7e1      	b.n	80013d8 <main+0x88>
 8001414:	200002e8 	.word	0x200002e8
 8001418:	200002a4 	.word	0x200002a4
 800141c:	200002a8 	.word	0x200002a8
 8001420:	20000234 	.word	0x20000234
 8001424:	2000029c 	.word	0x2000029c
 8001428:	080065cc 	.word	0x080065cc
 800142c:	200001f8 	.word	0x200001f8
 8001430:	2000021c 	.word	0x2000021c

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f003 f844 	bl	80044d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145e:	2310      	movs	r3, #16
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fb48 	bl	8002b00 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001476:	f000 f999 	bl	80017ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fdb3 	bl	8003000 <HAL_RCC_ClockConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014a0:	f000 f984 	bl	80017ac <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */
	User_DS1307_Handle.i2c=&hi2c2;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_I2C2_Init+0x70>)
 80014b2:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <MX_I2C2_Init+0x74>)
 80014b4:	601a      	str	r2, [r3, #0]
	User_DS1307_Handle.DS1307_I2Cx=I2C2;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_I2C2_Init+0x70>)
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <MX_I2C2_Init+0x78>)
 80014ba:	60da      	str	r2, [r3, #12]
	User_DS1307_Handle.DS1307_ADDRESS=0xD0;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_I2C2_Init+0x70>)
 80014be:	22d0      	movs	r2, #208	; 0xd0
 80014c0:	711a      	strb	r2, [r3, #4]
	User_DS1307_Handle.DS1307_CLOCK=100000;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_I2C2_Init+0x70>)
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <MX_I2C2_Init+0x7c>)
 80014c6:	609a      	str	r2, [r3, #8]
	User_DS1307_Handle.TIMEOUT=HAL_MAX_DELAY;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_I2C2_Init+0x70>)
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	611a      	str	r2, [r3, #16]
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_I2C2_Init+0x74>)
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <MX_I2C2_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C2_Init+0x74>)
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <MX_I2C2_Init+0x7c>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_I2C2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C2_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_I2C2_Init+0x74>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_I2C2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_I2C2_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_I2C2_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_I2C2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C2_Init+0x74>)
 800150a:	f000 fec9 	bl	80022a0 <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C2_Init+0x6c>
  {
    Error_Handler();
 8001514:	f000 f94a 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000234 	.word	0x20000234
 8001520:	20000248 	.word	0x20000248
 8001524:	40005800 	.word	0x40005800
 8001528:	000186a0 	.word	0x000186a0

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_TIM2_Init+0xe4>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <MX_TIM2_Init+0xe4>)
 8001566:	2250      	movs	r2, #80	; 0x50
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_TIM2_Init+0xe4>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_TIM2_Init+0xe4>)
 8001572:	2264      	movs	r2, #100	; 0x64
 8001574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_TIM2_Init+0xe4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_TIM2_Init+0xe4>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001582:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_TIM2_Init+0xe4>)
 8001584:	f001 fed8 	bl	8003338 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800158e:	f000 f90d 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_TIM2_Init+0xe4>)
 80015a0:	f002 f822 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 f8ff 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ae:	4818      	ldr	r0, [pc, #96]	; (8001610 <MX_TIM2_Init+0xe4>)
 80015b0:	f001 feed 	bl	800338e <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80015ba:	f000 f8f7 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4619      	mov	r1, r3
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_TIM2_Init+0xe4>)
 80015ce:	f002 fb67 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80015d8:	f000 f8e8 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM2_Init+0xe4>)
 80015f4:	f001 ff32 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015fe:	f000 f8d5 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM2_Init+0xe4>)
 8001604:	f000 f966 	bl	80018d4 <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	; 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002e8 	.word	0x200002e8

08001614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART1_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART1_UART_Init+0x4c>)
 800164c:	f002 fb6c 	bl	8003d28 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f8a9 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002a8 	.word	0x200002a8
 8001664:	40013800 	.word	0x40013800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <MX_GPIO_Init+0xec>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <MX_GPIO_Init+0xec>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <MX_GPIO_Init+0xec>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <MX_GPIO_Init+0xec>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <MX_GPIO_Init+0xec>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_GPIO_Init+0xec>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_GPIO_Init+0xec>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a28      	ldr	r2, [pc, #160]	; (8001754 <MX_GPIO_Init+0xec>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <MX_GPIO_Init+0xec>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB7_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80016ca:	4823      	ldr	r0, [pc, #140]	; (8001758 <MX_GPIO_Init+0xf0>)
 80016cc:	f000 fdcf 	bl	800226e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB6_Pin|DB5_Pin|DB4_Pin|E_Pin 
 80016d0:	2200      	movs	r2, #0
 80016d2:	f241 013b 	movw	r1, #4155	; 0x103b
 80016d6:	4821      	ldr	r0, [pc, #132]	; (800175c <MX_GPIO_Init+0xf4>)
 80016d8:	f000 fdc9 	bl	800226e <HAL_GPIO_WritePin>
                          |RW_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Down_Pin Up_Pin */
  GPIO_InitStruct.Pin = Down_Pin|Up_Pin;
 80016dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	481b      	ldr	r0, [pc, #108]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016f2:	f000 fc4b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Cancel_Pin Next_Pin MODE_Pin OK_Pin */
  GPIO_InitStruct.Pin = Cancel_Pin|Next_Pin|MODE_Pin|OK_Pin;
 80016f6:	2333      	movs	r3, #51	; 0x33
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <MX_GPIO_Init+0xf0>)
 800170a:	f000 fc3f 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = DB7_Pin|Buzzer_Pin;
 800170e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_GPIO_Init+0xf0>)
 8001728:	f000 fc30 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DB6_Pin DB5_Pin DB4_Pin E_Pin 
                           RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB6_Pin|DB5_Pin|DB4_Pin|E_Pin 
 800172c:	f241 033b 	movw	r3, #4155	; 0x103b
 8001730:	613b      	str	r3, [r7, #16]
                          |RW_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_GPIO_Init+0xf4>)
 8001746:	f000 fc21 	bl	8001f8c <HAL_GPIO_Init>

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000

08001764 <Run_while>:

/* USER CODE BEGIN 4 */
void Run_while()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	User_GLCD_ShowStringNoXY(User_GLCD_DataBuffer);
	User_CombineFunc_ReadDHT22_ShowOnGLCD(&hi2c2, &MyDHT);
	HAL_Delay(20);
	*/

	if(User_Button_Up()==1)
 8001768:	f7ff f998 	bl	8000a9c <User_Button_Up>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d114      	bne.n	800179c <Run_while+0x38>
	{
		User_Button_countUp ++;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <Run_while+0x3c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <Run_while+0x3c>)
 800177a:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 800177c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001780:	f000 fa5e 	bl	8001c40 <HAL_Delay>
		sprintf(User_GLCD_DataBuffer,"U=%d",User_Button_countUp);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <Run_while+0x3c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4906      	ldr	r1, [pc, #24]	; (80017a4 <Run_while+0x40>)
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <Run_while+0x44>)
 800178e:	f003 faf7 	bl	8004d80 <siprintf>
		User_GLCD_ShowString(0, 0, User_GLCD_DataBuffer);
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <Run_while+0x44>)
 8001794:	2100      	movs	r1, #0
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff f9d4 	bl	8000b44 <User_GLCD_ShowString>
	}


}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000020c 	.word	0x2000020c
 80017a4:	080065d8 	.word	0x080065d8
 80017a8:	2000021c 	.word	0x2000021c

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_MspInit+0x5c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_MspInit+0x5c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x5c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x5c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_MspInit+0x60>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_MspInit+0x60>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000

0800181c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_I2C_MspInit+0x74>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d124      	bne.n	8001886 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_I2C_MspInit+0x78>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <HAL_I2C_MspInit+0x78>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_I2C_MspInit+0x78>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001854:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185a:	2312      	movs	r3, #18
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_I2C_MspInit+0x7c>)
 800186a:	f000 fb8f 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_I2C_MspInit+0x78>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_I2C_MspInit+0x78>)
 8001874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_I2C_MspInit+0x78>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40005800 	.word	0x40005800
 8001894:	40021000 	.word	0x40021000
 8001898:	40010c00 	.word	0x40010c00

0800189c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d10b      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_TIM_Base_MspInit+0x34>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_TIM_Base_MspInit+0x34>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_TIM_Base_MspInit+0x34>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d12a      	bne.n	800194a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_TIM_MspPostInit+0x80>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_TIM_MspPostInit+0x80>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_TIM_MspPostInit+0x80>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800190c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <HAL_TIM_MspPostInit+0x84>)
 8001922:	f000 fb33 	bl	8001f8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_TIM_MspPostInit+0x88>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_TIM_MspPostInit+0x88>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_UART_MspInit+0x9c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d139      	bne.n	80019f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_UART_MspInit+0xa4>)
 80019c6:	f000 fae1 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	4809      	ldr	r0, [pc, #36]	; (8001a04 <HAL_UART_MspInit+0xa4>)
 80019e0:	f000 fad4 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2025      	movs	r0, #37	; 0x25
 80019ea:	f000 fa22 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ee:	2025      	movs	r0, #37	; 0x25
 80019f0:	f000 fa3b 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <MemManage_Handler+0x4>

08001a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <BusFault_Handler+0x4>

08001a26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f8d8 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <USART1_IRQHandler+0x10>)
 8001a62:	f002 fa03 	bl	8003e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002a8 	.word	0x200002a8

08001a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x50>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x16>
		heap_end = &end;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <_sbrk+0x50>)
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <_sbrk+0x54>)
 8001a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <_sbrk+0x50>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <_sbrk+0x50>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	466a      	mov	r2, sp
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d907      	bls.n	8001aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a9a:	f002 fcef 	bl	800447c <__errno>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	e006      	b.n	8001ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <_sbrk+0x50>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <_sbrk+0x50>)
 8001ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000210 	.word	0x20000210
 8001ac4:	20000330 	.word	0x20000330

08001ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SystemInit+0x5c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <SystemInit+0x5c>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SystemInit+0x5c>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4911      	ldr	r1, [pc, #68]	; (8001b24 <SystemInit+0x5c>)
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x60>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <SystemInit+0x5c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <SystemInit+0x5c>)
 8001aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SystemInit+0x5c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SystemInit+0x5c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SystemInit+0x5c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <SystemInit+0x5c>)
 8001b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SystemInit+0x5c>)
 8001b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SystemInit+0x64>)
 8001b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	f8ff0000 	.word	0xf8ff0000
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b56:	f7ff ffb7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f002 fc95 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff fbf7 	bl	8001350 <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r3, =_sidata
 8001b64:	08006870 	.word	0x08006870
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001b70:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001b74:	20000330 	.word	0x20000330

08001b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_2_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x28>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 f945 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fe0e 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f95d 	bl	8001e86 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f925 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x1c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x20>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_IncTick+0x20>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000328 	.word	0x20000328

08001c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_GetTick+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000328 	.word	0x20000328

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_Delay+0x40>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffe0 	bl	8001c2c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000008 	.word	0x20000008

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4906      	ldr	r1, [pc, #24]	; (8001d1c <__NVIC_EnableIRQ+0x34>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff90 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff2d 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff42 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff90 	bl	8001d74 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff35 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d005      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e051      	b.n	8001f66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 020e 	bic.w	r2, r2, #14
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <HAL_DMA_Abort_IT+0xd0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d029      	beq.n	8001f40 <HAL_DMA_Abort_IT+0xa0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_DMA_Abort_IT+0xd4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_Abort_IT+0x9c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_DMA_Abort_IT+0xd8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01a      	beq.n	8001f36 <HAL_DMA_Abort_IT+0x96>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_DMA_Abort_IT+0xdc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d012      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x90>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_DMA_Abort_IT+0xe0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00a      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x8a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_DMA_Abort_IT+0xe4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d102      	bne.n	8001f24 <HAL_DMA_Abort_IT+0x84>
 8001f1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f22:	e00e      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f28:	e00b      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2e:	e008      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	e005      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	e002      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_Abort_IT+0xa2>
 8001f40:	2301      	movs	r3, #1
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_DMA_Abort_IT+0xe8>)
 8001f44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
    } 
  }
  return status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40020008 	.word	0x40020008
 8001f74:	4002001c 	.word	0x4002001c
 8001f78:	40020030 	.word	0x40020030
 8001f7c:	40020044 	.word	0x40020044
 8001f80:	40020058 	.word	0x40020058
 8001f84:	4002006c 	.word	0x4002006c
 8001f88:	40020000 	.word	0x40020000

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e127      	b.n	80021f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8116 	bne.w	80021ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d034      	beq.n	8002030 <HAL_GPIO_Init+0xa4>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d80d      	bhi.n	8001fe6 <HAL_GPIO_Init+0x5a>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d02b      	beq.n	8002026 <HAL_GPIO_Init+0x9a>
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d804      	bhi.n	8001fdc <HAL_GPIO_Init+0x50>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d031      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d01c      	beq.n	8002014 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e048      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d043      	beq.n	8002068 <HAL_GPIO_Init+0xdc>
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d01b      	beq.n	800201c <HAL_GPIO_Init+0x90>
          break;
 8001fe4:	e043      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fe6:	4a89      	ldr	r2, [pc, #548]	; (800220c <HAL_GPIO_Init+0x280>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d026      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001fec:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_GPIO_Init+0x280>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d806      	bhi.n	8002000 <HAL_GPIO_Init+0x74>
 8001ff2:	4a87      	ldr	r2, [pc, #540]	; (8002210 <HAL_GPIO_Init+0x284>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d020      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001ff8:	4a86      	ldr	r2, [pc, #536]	; (8002214 <HAL_GPIO_Init+0x288>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_GPIO_Init+0xae>
          break;
 8001ffe:	e036      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002000:	4a85      	ldr	r2, [pc, #532]	; (8002218 <HAL_GPIO_Init+0x28c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8002006:	4a85      	ldr	r2, [pc, #532]	; (800221c <HAL_GPIO_Init+0x290>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_GPIO_Init+0xae>
 800200c:	4a84      	ldr	r2, [pc, #528]	; (8002220 <HAL_GPIO_Init+0x294>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xae>
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e028      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e023      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01e      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e019      	b.n	800206e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e012      	b.n	800206e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e008      	b.n	800206e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2bff      	cmp	r3, #255	; 0xff
 8002072:	d801      	bhi.n	8002078 <HAL_GPIO_Init+0xec>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	e001      	b.n	800207c <HAL_GPIO_Init+0xf0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2bff      	cmp	r3, #255	; 0xff
 8002082:	d802      	bhi.n	800208a <HAL_GPIO_Init+0xfe>
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x104>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3b08      	subs	r3, #8
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	210f      	movs	r1, #15
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	6a39      	ldr	r1, [r7, #32]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8096 	beq.w	80021ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6193      	str	r3, [r2, #24]
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_GPIO_Init+0x29c>)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_GPIO_Init+0x2a0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x19e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x19a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x196>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x192>
 800211a:	2303      	movs	r3, #3
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 800211e:	2304      	movs	r3, #4
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 800212a:	2300      	movs	r3, #0
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213c:	493a      	ldr	r1, [pc, #232]	; (8002228 <HAL_GPIO_Init+0x29c>)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4938      	ldr	r1, [pc, #224]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	43db      	mvns	r3, r3
 800216c:	4933      	ldr	r1, [pc, #204]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800216e:	4013      	ands	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	492e      	ldr	r1, [pc, #184]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	4929      	ldr	r1, [pc, #164]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002196:	4013      	ands	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	4924      	ldr	r1, [pc, #144]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	491f      	ldr	r1, [pc, #124]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60cb      	str	r3, [r1, #12]
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4915      	ldr	r1, [pc, #84]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f aed0 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 8002200:	bf00      	nop
 8002202:	372c      	adds	r7, #44	; 0x2c
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	10210000 	.word	0x10210000
 8002210:	10110000 	.word	0x10110000
 8002214:	10120000 	.word	0x10120000
 8002218:	10310000 	.word	0x10310000
 800221c:	10320000 	.word	0x10320000
 8002220:	10220000 	.word	0x10220000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	40010800 	.word	0x40010800
 8002230:	40010c00 	.word	0x40010c00
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	807b      	strh	r3, [r7, #2]
 800227a:	4613      	mov	r3, r2
 800227c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002284:	887a      	ldrh	r2, [r7, #2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800228a:	e003      	b.n	8002294 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	041a      	lsls	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	611a      	str	r2, [r3, #16]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e10f      	b.n	80024d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff faa8 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e4:	f000 ffe2 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 80022e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a7b      	ldr	r2, [pc, #492]	; (80024dc <HAL_I2C_Init+0x23c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d807      	bhi.n	8002304 <HAL_I2C_Init+0x64>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a7a      	ldr	r2, [pc, #488]	; (80024e0 <HAL_I2C_Init+0x240>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf94      	ite	ls
 80022fc:	2301      	movls	r3, #1
 80022fe:	2300      	movhi	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e006      	b.n	8002312 <HAL_I2C_Init+0x72>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <HAL_I2C_Init+0x244>)
 8002308:	4293      	cmp	r3, r2
 800230a:	bf94      	ite	ls
 800230c:	2301      	movls	r3, #1
 800230e:	2300      	movhi	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0db      	b.n	80024d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <HAL_I2C_Init+0x248>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0c9b      	lsrs	r3, r3, #18
 8002324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a64      	ldr	r2, [pc, #400]	; (80024dc <HAL_I2C_Init+0x23c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d802      	bhi.n	8002354 <HAL_I2C_Init+0xb4>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3301      	adds	r3, #1
 8002352:	e009      	b.n	8002368 <HAL_I2C_Init+0xc8>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_I2C_Init+0x24c>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	3301      	adds	r3, #1
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	430b      	orrs	r3, r1
 800236e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800237a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4956      	ldr	r1, [pc, #344]	; (80024dc <HAL_I2C_Init+0x23c>)
 8002384:	428b      	cmp	r3, r1
 8002386:	d80d      	bhi.n	80023a4 <HAL_I2C_Init+0x104>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1e59      	subs	r1, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fbb1 f3f3 	udiv	r3, r1, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	bf38      	it	cc
 80023a0:	2304      	movcc	r3, #4
 80023a2:	e04f      	b.n	8002444 <HAL_I2C_Init+0x1a4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_I2C_Init+0x130>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e012      	b.n	80023f6 <HAL_I2C_Init+0x156>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Init+0x15e>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e022      	b.n	8002444 <HAL_I2C_Init+0x1a4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10e      	bne.n	8002424 <HAL_I2C_Init+0x184>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e58      	subs	r0, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	440b      	add	r3, r1
 8002414:	fbb0 f3f3 	udiv	r3, r0, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Init+0x1a4>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e58      	subs	r0, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	6809      	ldr	r1, [r1, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6911      	ldr	r1, [r2, #16]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	000186a0 	.word	0x000186a0
 80024e0:	001e847f 	.word	0x001e847f
 80024e4:	003d08ff 	.word	0x003d08ff
 80024e8:	431bde83 	.word	0x431bde83
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	460b      	mov	r3, r1
 80024fe:	817b      	strh	r3, [r7, #10]
 8002500:	4613      	mov	r3, r2
 8002502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff fb92 	bl	8001c2c <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 80e0 	bne.w	80026d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	4970      	ldr	r1, [pc, #448]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f966 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	e0d3      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x50>
 800253c:	2302      	movs	r3, #2
 800253e:	e0cc      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d007      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a8:	8979      	ldrh	r1, [r7, #10]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8aa 	bl	8002708 <I2C_MasterRequestWrite>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e08d      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d4:	e066      	b.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9e0 	bl	80029a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d107      	bne.n	80025fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x188>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d017      	beq.n	8002678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6a39      	ldr	r1, [r7, #32]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f9d0 	bl	8002a22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b04      	cmp	r3, #4
 800268e:	d107      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e01a      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d194      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00100002 	.word	0x00100002
 80026e8:	ffff0000 	.word	0xffff0000

080026ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d006      	beq.n	8002732 <I2C_MasterRequestWrite+0x2a>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d003      	beq.n	8002732 <I2C_MasterRequestWrite+0x2a>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002730:	d108      	bne.n	8002744 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e00b      	b.n	800275c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2b12      	cmp	r3, #18
 800274a:	d107      	bne.n	800275c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f843 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e035      	b.n	80027e4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002780:	d108      	bne.n	8002794 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002790:	611a      	str	r2, [r3, #16]
 8002792:	e01b      	b.n	80027cc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	11db      	asrs	r3, r3, #7
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 0306 	and.w	r3, r3, #6
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f063 030f 	orn	r3, r3, #15
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	490e      	ldr	r1, [pc, #56]	; (80027ec <I2C_MasterRequestWrite+0xe4>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f875 	bl	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e010      	b.n	80027e4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <I2C_MasterRequestWrite+0xe8>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f865 	bl	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010008 	.word	0x00010008
 80027f0:	00010002 	.word	0x00010002

080027f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002804:	e025      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d021      	beq.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff fa0d 	bl	8001c2c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e023      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10d      	bne.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	e00c      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0b6      	beq.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b0:	e051      	b.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d123      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e046      	b.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d021      	beq.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f98b 	bl	8001c2c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d116      	bne.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e020      	b.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e00b      	b.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d18d      	bne.n	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ac:	e02d      	b.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f878 	bl	8002aa4 <I2C_IsAcknowledgeFailed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02d      	b.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d021      	beq.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f931 	bl	8001c2c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b80      	cmp	r3, #128	; 0x80
 8002a16:	d1ca      	bne.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2e:	e02d      	b.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f837 	bl	8002aa4 <I2C_IsAcknowledgeFailed>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e02d      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d021      	beq.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7ff f8f0 	bl	8001c2c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d1ca      	bne.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d11b      	bne.n	8002af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e26c      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8087 	beq.w	8002c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b20:	4b92      	ldr	r3, [pc, #584]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d00c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b2c:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d112      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5e>
 8002b38:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d10b      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	4b89      	ldr	r3, [pc, #548]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d06c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x12c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d168      	bne.n	8002c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e246      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x76>
 8002b68:	4b80      	ldr	r3, [pc, #512]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7f      	ldr	r2, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e02e      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x98>
 8002b7e:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7a      	ldr	r2, [pc, #488]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a77      	ldr	r2, [pc, #476]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0xbc>
 8002ba2:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a71      	ldr	r2, [pc, #452]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6e      	ldr	r2, [pc, #440]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xd4>
 8002bbc:	4b6b      	ldr	r3, [pc, #428]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a6a      	ldr	r2, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff f826 	bl	8001c2c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7ff f822 	bl	8001c2c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1fa      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xe4>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7ff f812 	bl	8001c2c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f80e 	bl	8001c2c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1e6      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x10c>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3a:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c46:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x18c>
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x176>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e1ba      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4939      	ldr	r1, [pc, #228]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	e03a      	b.n	8002d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_RCC_OscConfig+0x270>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe ffc7 	bl	8001c2c <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe ffc3 	bl	8001c2c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e19b      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4927      	ldr	r1, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCC_OscConfig+0x270>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ffa6 	bl	8001c2c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe ffa2 	bl	8001c2c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e17a      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d03a      	beq.n	8002d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d019      	beq.n	8002d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_RCC_OscConfig+0x274>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe ff86 	bl	8001c2c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe ff82 	bl	8001c2c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e15a      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_OscConfig+0x26c>)
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f000 fada 	bl	80032fc <RCC_Delay>
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe ff6c 	bl	8001c2c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d56:	e00f      	b.n	8002d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe ff68 	bl	8001c2c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d908      	bls.n	8002d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e140      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	42420000 	.word	0x42420000
 8002d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b9e      	ldr	r3, [pc, #632]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e9      	bne.n	8002d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a6 	beq.w	8002ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b97      	ldr	r3, [pc, #604]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4b94      	ldr	r3, [pc, #592]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4a93      	ldr	r2, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	61d3      	str	r3, [r2, #28]
 8002dae:	4b91      	ldr	r3, [pc, #580]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b8e      	ldr	r3, [pc, #568]	; (8002ff8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a8a      	ldr	r2, [pc, #552]	; (8002ff8 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe ff29 	bl	8001c2c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe ff25 	bl	8001c2c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0fd      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <HAL_RCC_OscConfig+0x4f8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x312>
 8002e04:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_OscConfig+0x36e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x334>
 8002e1a:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a75      	ldr	r2, [pc, #468]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	4b73      	ldr	r3, [pc, #460]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a72      	ldr	r2, [pc, #456]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	e01c      	b.n	8002e6e <HAL_RCC_OscConfig+0x36e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x356>
 8002e3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a6c      	ldr	r2, [pc, #432]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4a69      	ldr	r2, [pc, #420]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6213      	str	r3, [r2, #32]
 8002e54:	e00b      	b.n	8002e6e <HAL_RCC_OscConfig+0x36e>
 8002e56:	4b67      	ldr	r3, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a66      	ldr	r2, [pc, #408]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fed9 	bl	8001c2c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fed5 	bl	8001c2c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0ab      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b57      	ldr	r3, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCC_OscConfig+0x37e>
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fec3 	bl	8001c2c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe febf 	bl	8001c2c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e095      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed2:	4b48      	ldr	r3, [pc, #288]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a47      	ldr	r2, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8081 	beq.w	8002fea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d061      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d146      	bne.n	8002f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_OscConfig+0x4fc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe fe93 	bl	8001c2c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe fe8f 	bl	8001c2c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e067      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1c:	4b35      	ldr	r3, [pc, #212]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	492d      	ldr	r1, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a19      	ldr	r1, [r3, #32]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	430b      	orrs	r3, r1
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_OscConfig+0x4fc>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe fe63 	bl	8001c2c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe fe5f 	bl	8001c2c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e037      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x46a>
 8002f88:	e02f      	b.n	8002fea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_RCC_OscConfig+0x4fc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fe4c 	bl	8001c2c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fe48 	bl	8001c2c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e020      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x498>
 8002fb6:	e018      	b.n	8002fea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e013      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42420060 	.word	0x42420060

08003000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0d0      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4965      	ldr	r1, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003066:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800307e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d040      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e073      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4936      	ldr	r1, [pc, #216]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe fd9c 	bl	8001c2c <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fd98 	bl	8001c2c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e053      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d210      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4601      	mov	r1, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	fa21 f303 	lsr.w	r3, r1, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1cc>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1d0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fcfa 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080065f4 	.word	0x080065f4
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b490      	push	{r4, r7}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031dc:	1d3c      	adds	r4, r7, #4
 80031de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x40>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x46>
 8003212:	e02d      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003214:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003216:	623b      	str	r3, [r7, #32]
      break;
 8003218:	e02d      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003226:	4413      	add	r3, r2
 8003228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800322c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_GetSysClockFreq+0xb8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c5b      	lsrs	r3, r3, #17
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003246:	4413      	add	r3, r2
 8003248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800324c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003252:	fb02 f203 	mul.w	r2, r2, r3
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e004      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	623b      	str	r3, [r7, #32]
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003272:	623b      	str	r3, [r7, #32]
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	6a3b      	ldr	r3, [r7, #32]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc90      	pop	{r4, r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	080065e0 	.word	0x080065e0
 8003288:	080065f0 	.word	0x080065f0
 800328c:	40021000 	.word	0x40021000
 8003290:	007a1200 	.word	0x007a1200
 8003294:	003d0900 	.word	0x003d0900

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff2 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08006604 	.word	0x08006604

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffde 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032dc:	4601      	mov	r1, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08006604 	.word	0x08006604

080032fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <RCC_Delay+0x34>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <RCC_Delay+0x38>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003318:	bf00      	nop
  }
  while (Delay --);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	60fa      	str	r2, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f9      	bne.n	8003318 <RCC_Delay+0x1c>
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e01d      	b.n	8003386 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe fa9c 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 f9ee 	bl	8003758 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e01d      	b.n	80033dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f815 	bl	80033e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 f9c3 	bl	8003758 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fc24 	bl	8003c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_TIM_PWM_Start+0x60>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d107      	bne.n	800342a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d007      	beq.n	800344c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00

0800345c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003472:	2302      	movs	r3, #2
 8003474:	e0b4      	b.n	80035e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	f200 809f 	bhi.w	80035cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800348e:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080035cd 	.word	0x080035cd
 800349c:	080035cd 	.word	0x080035cd
 80034a0:	080035cd 	.word	0x080035cd
 80034a4:	08003509 	.word	0x08003509
 80034a8:	080035cd 	.word	0x080035cd
 80034ac:	080035cd 	.word	0x080035cd
 80034b0:	080035cd 	.word	0x080035cd
 80034b4:	0800354b 	.word	0x0800354b
 80034b8:	080035cd 	.word	0x080035cd
 80034bc:	080035cd 	.word	0x080035cd
 80034c0:	080035cd 	.word	0x080035cd
 80034c4:	0800358b 	.word	0x0800358b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f9a4 	bl	800381c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0208 	orr.w	r2, r2, #8
 80034e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6999      	ldr	r1, [r3, #24]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	619a      	str	r2, [r3, #24]
      break;
 8003506:	e062      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f9ea 	bl	80038e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	619a      	str	r2, [r3, #24]
      break;
 8003548:	e041      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fa33 	bl	80039bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0208 	orr.w	r2, r2, #8
 8003564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0204 	bic.w	r2, r2, #4
 8003574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69d9      	ldr	r1, [r3, #28]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	61da      	str	r2, [r3, #28]
      break;
 8003588:	e021      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fa7d 	bl	8003a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69d9      	ldr	r1, [r3, #28]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	61da      	str	r2, [r3, #28]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_ConfigClockSource+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0a6      	b.n	800374e <HAL_TIM_ConfigClockSource+0x166>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800361e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003626:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d067      	beq.n	8003708 <HAL_TIM_ConfigClockSource+0x120>
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d80b      	bhi.n	8003654 <HAL_TIM_ConfigClockSource+0x6c>
 800363c:	2b10      	cmp	r3, #16
 800363e:	d073      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0x140>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d802      	bhi.n	800364a <HAL_TIM_ConfigClockSource+0x62>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d06f      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003648:	e078      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800364a:	2b20      	cmp	r3, #32
 800364c:	d06c      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0x140>
 800364e:	2b30      	cmp	r3, #48	; 0x30
 8003650:	d06a      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003652:	e073      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003654:	2b70      	cmp	r3, #112	; 0x70
 8003656:	d00d      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0x8c>
 8003658:	2b70      	cmp	r3, #112	; 0x70
 800365a:	d804      	bhi.n	8003666 <HAL_TIM_ConfigClockSource+0x7e>
 800365c:	2b50      	cmp	r3, #80	; 0x50
 800365e:	d033      	beq.n	80036c8 <HAL_TIM_ConfigClockSource+0xe0>
 8003660:	2b60      	cmp	r3, #96	; 0x60
 8003662:	d041      	beq.n	80036e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003664:	e06a      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	d066      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x152>
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d017      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003672:	e063      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f000 fac9 	bl	8003c1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003696:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
      break;
 80036a0:	e04c      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f000 fab2 	bl	8003c1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c4:	609a      	str	r2, [r3, #8]
      break;
 80036c6:	e039      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f000 fa29 	bl	8003b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2150      	movs	r1, #80	; 0x50
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fa80 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 80036e6:	e029      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f000 fa47 	bl	8003b88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2160      	movs	r1, #96	; 0x60
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa70 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003706:	e019      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	461a      	mov	r2, r3
 8003716:	f000 fa09 	bl	8003b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fa60 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003726:	e009      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f000 fa57 	bl	8003be6 <TIM_ITRx_SetConfig>
      break;
 8003738:	e000      	b.n	800373c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800373a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a29      	ldr	r2, [pc, #164]	; (8003810 <TIM_Base_SetConfig+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x30>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x30>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a26      	ldr	r2, [pc, #152]	; (8003814 <TIM_Base_SetConfig+0xbc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x30>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a25      	ldr	r2, [pc, #148]	; (8003818 <TIM_Base_SetConfig+0xc0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <TIM_Base_SetConfig+0xb8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <TIM_Base_SetConfig+0xbc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_Base_SetConfig+0xc0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <TIM_Base_SetConfig+0xb8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d103      	bne.n	8003800 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	615a      	str	r2, [r3, #20]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800

0800381c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 0302 	bic.w	r3, r3, #2
 8003864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <TIM_OC1_SetConfig+0xc8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10c      	bne.n	8003892 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0308 	bic.w	r3, r3, #8
 800387e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <TIM_OC1_SetConfig+0xc8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d111      	bne.n	80038be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40012c00 	.word	0x40012c00

080038e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0210 	bic.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0320 	bic.w	r3, r3, #32
 8003932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <TIM_OC2_SetConfig+0xd0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d10d      	bne.n	8003964 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <TIM_OC2_SetConfig+0xd0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d113      	bne.n	8003994 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00

080039bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <TIM_OC3_SetConfig+0xd0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10d      	bne.n	8003a36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <TIM_OC3_SetConfig+0xd0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d113      	bne.n	8003a66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	031b      	lsls	r3, r3, #12
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <TIM_OC4_SetConfig+0x98>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d109      	bne.n	8003b04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	40012c00 	.word	0x40012c00

08003b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 030a 	bic.w	r3, r3, #10
 8003b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 0210 	bic.w	r2, r3, #16
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	031b      	lsls	r3, r3, #12
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f043 0307 	orr.w	r3, r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b087      	sub	sp, #28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e032      	b.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e03f      	b.n	8003dba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fe06 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 faab 	bl	80042c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d140      	bne.n	8003e5e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_Receive_IT+0x26>
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e039      	b.n	8003e60 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Receive_IT+0x38>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e032      	b.n	8003e60 <HAL_UART_Receive_IT+0x9e>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2222      	movs	r2, #34	; 0x22
 8003e1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e000      	b.n	8003e60 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10d      	bne.n	8003ebe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_UART_IRQHandler+0x52>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f984 	bl	80041c4 <UART_Receive_IT>
      return;
 8003ebc:	e0cc      	b.n	8004058 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80ab 	beq.w	800401c <HAL_UART_IRQHandler+0x1b0>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <HAL_UART_IRQHandler+0x70>
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a0 	beq.w	800401c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_UART_IRQHandler+0x90>
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_UART_IRQHandler+0xb0>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	f043 0202 	orr.w	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_UART_IRQHandler+0xd0>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	f043 0204 	orr.w	r2, r3, #4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_UART_IRQHandler+0xf0>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	f043 0208 	orr.w	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d078      	beq.n	8004056 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_UART_IRQHandler+0x112>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f923 	bl	80041c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x13a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d031      	beq.n	800400a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f86e 	bl	8004088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d023      	beq.n	8004002 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d013      	beq.n	8003ffa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	4a22      	ldr	r2, [pc, #136]	; (8004060 <HAL_UART_IRQHandler+0x1f4>)
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd ff5e 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	e00e      	b.n	8004018 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f83b 	bl	8004076 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e00a      	b.n	8004018 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f837 	bl	8004076 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e006      	b.n	8004018 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f833 	bl	8004076 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004016:	e01e      	b.n	8004056 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	bf00      	nop
    return;
 800401a:	e01c      	b.n	8004056 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_UART_IRQHandler+0x1cc>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f85a 	bl	80040ea <UART_Transmit_IT>
    return;
 8004036:	e00f      	b.n	8004058 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_UART_IRQHandler+0x1ec>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f8a1 	bl	8004194 <UART_EndTransmit_IT>
    return;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004056:	bf00      	nop
  }
}
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	080040c3 	.word	0x080040c3

08004064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800409e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ffca 	bl	8004076 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b21      	cmp	r3, #33	; 0x21
 80040fc:	d144      	bne.n	8004188 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d11a      	bne.n	800413e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]
 8004130:	e00e      	b.n	8004150 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]
 800413c:	e008      	b.n	8004150 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	1c59      	adds	r1, r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6211      	str	r1, [r2, #32]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4619      	mov	r1, r3
 800415e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff55 	bl	8004064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b22      	cmp	r3, #34	; 0x22
 80041d6:	d171      	bne.n	80042bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d123      	bne.n	800422a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10e      	bne.n	800420e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
 800420c:	e029      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b29b      	uxth	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
 8004228:	e01b      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6858      	ldr	r0, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	1c59      	adds	r1, r3, #1
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6291      	str	r1, [r2, #40]	; 0x28
 8004242:	b2c2      	uxtb	r2, r0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e00c      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	1c58      	adds	r0, r3, #1
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	6288      	str	r0, [r1, #40]	; 0x28
 800425a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4619      	mov	r1, r3
 8004270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004272:	2b00      	cmp	r3, #0
 8004274:	d120      	bne.n	80042b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0220 	bic.w	r2, r2, #32
 8004284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f81c 	bl	80012ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e002      	b.n	80042be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004302:	f023 030c 	bic.w	r3, r3, #12
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	430b      	orrs	r3, r1
 800430e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a52      	ldr	r2, [pc, #328]	; (8004474 <UART_SetConfig+0x1ac>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d14e      	bne.n	80043ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe ffd0 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8004334:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009a      	lsls	r2, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <UART_SetConfig+0x1b0>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	0119      	lsls	r1, r3, #4
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f2f3 	udiv	r2, r2, r3
 800436c:	4b42      	ldr	r3, [pc, #264]	; (8004478 <UART_SetConfig+0x1b0>)
 800436e:	fba3 0302 	umull	r0, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2064      	movs	r0, #100	; 0x64
 8004376:	fb00 f303 	mul.w	r3, r0, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a3d      	ldr	r2, [pc, #244]	; (8004478 <UART_SetConfig+0x1b0>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800438c:	4419      	add	r1, r3
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <UART_SetConfig+0x1b0>)
 80043a6:	fba3 0302 	umull	r0, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2064      	movs	r0, #100	; 0x64
 80043ae:	fb00 f303 	mul.w	r3, r0, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	3332      	adds	r3, #50	; 0x32
 80043b8:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <UART_SetConfig+0x1b0>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	440a      	add	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80043cc:	e04d      	b.n	800446a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ce:	f7fe ff6d 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 80043d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009a      	lsls	r2, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4a23      	ldr	r2, [pc, #140]	; (8004478 <UART_SetConfig+0x1b0>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	0119      	lsls	r1, r3, #4
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009a      	lsls	r2, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	fbb2 f2f3 	udiv	r2, r2, r3
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <UART_SetConfig+0x1b0>)
 800440c:	fba3 0302 	umull	r0, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2064      	movs	r0, #100	; 0x64
 8004414:	fb00 f303 	mul.w	r3, r0, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a16      	ldr	r2, [pc, #88]	; (8004478 <UART_SetConfig+0x1b0>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442a:	4419      	add	r1, r3
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009a      	lsls	r2, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <UART_SetConfig+0x1b0>)
 8004444:	fba3 0302 	umull	r0, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2064      	movs	r0, #100	; 0x64
 800444c:	fb00 f303 	mul.w	r3, r0, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	; 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <UART_SetConfig+0x1b0>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	440a      	add	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40013800 	.word	0x40013800
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	; (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	2500      	movs	r5, #0
 800448c:	4e0c      	ldr	r6, [pc, #48]	; (80044c0 <__libc_init_array+0x38>)
 800448e:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 8004490:	1ba4      	subs	r4, r4, r6
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	42a5      	cmp	r5, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	f002 f868 	bl	800656c <_init>
 800449c:	2500      	movs	r5, #0
 800449e:	4e0a      	ldr	r6, [pc, #40]	; (80044c8 <__libc_init_array+0x40>)
 80044a0:	4c0a      	ldr	r4, [pc, #40]	; (80044cc <__libc_init_array+0x44>)
 80044a2:	1ba4      	subs	r4, r4, r6
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	42a5      	cmp	r5, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044b0:	4798      	blx	r3
 80044b2:	3501      	adds	r5, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ba:	4798      	blx	r3
 80044bc:	3501      	adds	r5, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08006868 	.word	0x08006868
 80044c4:	08006868 	.word	0x08006868
 80044c8:	08006868 	.word	0x08006868
 80044cc:	0800686c 	.word	0x0800686c

080044d0 <memset>:
 80044d0:	4603      	mov	r3, r0
 80044d2:	4402      	add	r2, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <__cvt>:
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e6:	461e      	mov	r6, r3
 80044e8:	bfbb      	ittet	lt
 80044ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044ee:	461e      	movlt	r6, r3
 80044f0:	2300      	movge	r3, #0
 80044f2:	232d      	movlt	r3, #45	; 0x2d
 80044f4:	b088      	sub	sp, #32
 80044f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044f8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80044fc:	f027 0720 	bic.w	r7, r7, #32
 8004500:	2f46      	cmp	r7, #70	; 0x46
 8004502:	4614      	mov	r4, r2
 8004504:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004506:	700b      	strb	r3, [r1, #0]
 8004508:	d004      	beq.n	8004514 <__cvt+0x34>
 800450a:	2f45      	cmp	r7, #69	; 0x45
 800450c:	d100      	bne.n	8004510 <__cvt+0x30>
 800450e:	3501      	adds	r5, #1
 8004510:	2302      	movs	r3, #2
 8004512:	e000      	b.n	8004516 <__cvt+0x36>
 8004514:	2303      	movs	r3, #3
 8004516:	aa07      	add	r2, sp, #28
 8004518:	9204      	str	r2, [sp, #16]
 800451a:	aa06      	add	r2, sp, #24
 800451c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004520:	e9cd 3500 	strd	r3, r5, [sp]
 8004524:	4622      	mov	r2, r4
 8004526:	4633      	mov	r3, r6
 8004528:	f000 fce2 	bl	8004ef0 <_dtoa_r>
 800452c:	2f47      	cmp	r7, #71	; 0x47
 800452e:	4680      	mov	r8, r0
 8004530:	d102      	bne.n	8004538 <__cvt+0x58>
 8004532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004534:	07db      	lsls	r3, r3, #31
 8004536:	d526      	bpl.n	8004586 <__cvt+0xa6>
 8004538:	2f46      	cmp	r7, #70	; 0x46
 800453a:	eb08 0905 	add.w	r9, r8, r5
 800453e:	d111      	bne.n	8004564 <__cvt+0x84>
 8004540:	f898 3000 	ldrb.w	r3, [r8]
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d10a      	bne.n	800455e <__cvt+0x7e>
 8004548:	2200      	movs	r2, #0
 800454a:	2300      	movs	r3, #0
 800454c:	4620      	mov	r0, r4
 800454e:	4631      	mov	r1, r6
 8004550:	f7fc fa34 	bl	80009bc <__aeabi_dcmpeq>
 8004554:	b918      	cbnz	r0, 800455e <__cvt+0x7e>
 8004556:	f1c5 0501 	rsb	r5, r5, #1
 800455a:	f8ca 5000 	str.w	r5, [sl]
 800455e:	f8da 3000 	ldr.w	r3, [sl]
 8004562:	4499      	add	r9, r3
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	4620      	mov	r0, r4
 800456a:	4631      	mov	r1, r6
 800456c:	f7fc fa26 	bl	80009bc <__aeabi_dcmpeq>
 8004570:	b938      	cbnz	r0, 8004582 <__cvt+0xa2>
 8004572:	2230      	movs	r2, #48	; 0x30
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	454b      	cmp	r3, r9
 8004578:	d205      	bcs.n	8004586 <__cvt+0xa6>
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	9107      	str	r1, [sp, #28]
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e7f8      	b.n	8004574 <__cvt+0x94>
 8004582:	f8cd 901c 	str.w	r9, [sp, #28]
 8004586:	4640      	mov	r0, r8
 8004588:	9b07      	ldr	r3, [sp, #28]
 800458a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800458c:	eba3 0308 	sub.w	r3, r3, r8
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	b008      	add	sp, #32
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004598 <__exponent>:
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459a:	2900      	cmp	r1, #0
 800459c:	bfb4      	ite	lt
 800459e:	232d      	movlt	r3, #45	; 0x2d
 80045a0:	232b      	movge	r3, #43	; 0x2b
 80045a2:	4604      	mov	r4, r0
 80045a4:	bfb8      	it	lt
 80045a6:	4249      	neglt	r1, r1
 80045a8:	2909      	cmp	r1, #9
 80045aa:	f804 2b02 	strb.w	r2, [r4], #2
 80045ae:	7043      	strb	r3, [r0, #1]
 80045b0:	dd21      	ble.n	80045f6 <__exponent+0x5e>
 80045b2:	f10d 0307 	add.w	r3, sp, #7
 80045b6:	461f      	mov	r7, r3
 80045b8:	260a      	movs	r6, #10
 80045ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80045be:	fb06 1115 	mls	r1, r6, r5, r1
 80045c2:	2d09      	cmp	r5, #9
 80045c4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80045c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045cc:	f103 32ff 	add.w	r2, r3, #4294967295
 80045d0:	4629      	mov	r1, r5
 80045d2:	dc09      	bgt.n	80045e8 <__exponent+0x50>
 80045d4:	3130      	adds	r1, #48	; 0x30
 80045d6:	3b02      	subs	r3, #2
 80045d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045dc:	42bb      	cmp	r3, r7
 80045de:	4622      	mov	r2, r4
 80045e0:	d304      	bcc.n	80045ec <__exponent+0x54>
 80045e2:	1a10      	subs	r0, r2, r0
 80045e4:	b003      	add	sp, #12
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	4613      	mov	r3, r2
 80045ea:	e7e6      	b.n	80045ba <__exponent+0x22>
 80045ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f0:	f804 2b01 	strb.w	r2, [r4], #1
 80045f4:	e7f2      	b.n	80045dc <__exponent+0x44>
 80045f6:	2330      	movs	r3, #48	; 0x30
 80045f8:	4419      	add	r1, r3
 80045fa:	7083      	strb	r3, [r0, #2]
 80045fc:	1d02      	adds	r2, r0, #4
 80045fe:	70c1      	strb	r1, [r0, #3]
 8004600:	e7ef      	b.n	80045e2 <__exponent+0x4a>
	...

08004604 <_printf_float>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	b091      	sub	sp, #68	; 0x44
 800460a:	460c      	mov	r4, r1
 800460c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800460e:	4693      	mov	fp, r2
 8004610:	461e      	mov	r6, r3
 8004612:	4605      	mov	r5, r0
 8004614:	f001 fa20 	bl	8005a58 <_localeconv_r>
 8004618:	6803      	ldr	r3, [r0, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	9309      	str	r3, [sp, #36]	; 0x24
 800461e:	f7fb fda1 	bl	8000164 <strlen>
 8004622:	2300      	movs	r3, #0
 8004624:	930e      	str	r3, [sp, #56]	; 0x38
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	900a      	str	r0, [sp, #40]	; 0x28
 800462a:	3307      	adds	r3, #7
 800462c:	f023 0307 	bic.w	r3, r3, #7
 8004630:	f103 0208 	add.w	r2, r3, #8
 8004634:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004638:	f8d4 a000 	ldr.w	sl, [r4]
 800463c:	603a      	str	r2, [r7, #0]
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004646:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800464a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800464e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	4ba6      	ldr	r3, [pc, #664]	; (80048f0 <_printf_float+0x2ec>)
 8004656:	4638      	mov	r0, r7
 8004658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465a:	f7fc f9e1 	bl	8000a20 <__aeabi_dcmpun>
 800465e:	bb68      	cbnz	r0, 80046bc <_printf_float+0xb8>
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	4ba2      	ldr	r3, [pc, #648]	; (80048f0 <_printf_float+0x2ec>)
 8004666:	4638      	mov	r0, r7
 8004668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800466a:	f7fc f9bb 	bl	80009e4 <__aeabi_dcmple>
 800466e:	bb28      	cbnz	r0, 80046bc <_printf_float+0xb8>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	4638      	mov	r0, r7
 8004676:	4649      	mov	r1, r9
 8004678:	f7fc f9aa 	bl	80009d0 <__aeabi_dcmplt>
 800467c:	b110      	cbz	r0, 8004684 <_printf_float+0x80>
 800467e:	232d      	movs	r3, #45	; 0x2d
 8004680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004684:	4f9b      	ldr	r7, [pc, #620]	; (80048f4 <_printf_float+0x2f0>)
 8004686:	4b9c      	ldr	r3, [pc, #624]	; (80048f8 <_printf_float+0x2f4>)
 8004688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800468c:	bf98      	it	ls
 800468e:	461f      	movls	r7, r3
 8004690:	2303      	movs	r3, #3
 8004692:	f04f 0900 	mov.w	r9, #0
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	f02a 0304 	bic.w	r3, sl, #4
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	9600      	str	r6, [sp, #0]
 80046a0:	465b      	mov	r3, fp
 80046a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f9e2 	bl	8004a70 <_printf_common>
 80046ac:	3001      	adds	r0, #1
 80046ae:	f040 8090 	bne.w	80047d2 <_printf_float+0x1ce>
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	b011      	add	sp, #68	; 0x44
 80046b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046bc:	463a      	mov	r2, r7
 80046be:	464b      	mov	r3, r9
 80046c0:	4638      	mov	r0, r7
 80046c2:	4649      	mov	r1, r9
 80046c4:	f7fc f9ac 	bl	8000a20 <__aeabi_dcmpun>
 80046c8:	b110      	cbz	r0, 80046d0 <_printf_float+0xcc>
 80046ca:	4f8c      	ldr	r7, [pc, #560]	; (80048fc <_printf_float+0x2f8>)
 80046cc:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <_printf_float+0x2fc>)
 80046ce:	e7db      	b.n	8004688 <_printf_float+0x84>
 80046d0:	6863      	ldr	r3, [r4, #4]
 80046d2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	a80d      	add	r0, sp, #52	; 0x34
 80046da:	a90e      	add	r1, sp, #56	; 0x38
 80046dc:	d140      	bne.n	8004760 <_printf_float+0x15c>
 80046de:	2306      	movs	r3, #6
 80046e0:	6063      	str	r3, [r4, #4]
 80046e2:	f04f 0c00 	mov.w	ip, #0
 80046e6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80046ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	463a      	mov	r2, r7
 80046fa:	464b      	mov	r3, r9
 80046fc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004700:	4628      	mov	r0, r5
 8004702:	f7ff feed 	bl	80044e0 <__cvt>
 8004706:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800470a:	2b47      	cmp	r3, #71	; 0x47
 800470c:	4607      	mov	r7, r0
 800470e:	d109      	bne.n	8004724 <_printf_float+0x120>
 8004710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004712:	1cd8      	adds	r0, r3, #3
 8004714:	db02      	blt.n	800471c <_printf_float+0x118>
 8004716:	6862      	ldr	r2, [r4, #4]
 8004718:	4293      	cmp	r3, r2
 800471a:	dd47      	ble.n	80047ac <_printf_float+0x1a8>
 800471c:	f1a8 0802 	sub.w	r8, r8, #2
 8004720:	fa5f f888 	uxtb.w	r8, r8
 8004724:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004728:	990d      	ldr	r1, [sp, #52]	; 0x34
 800472a:	d824      	bhi.n	8004776 <_printf_float+0x172>
 800472c:	3901      	subs	r1, #1
 800472e:	4642      	mov	r2, r8
 8004730:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004734:	910d      	str	r1, [sp, #52]	; 0x34
 8004736:	f7ff ff2f 	bl	8004598 <__exponent>
 800473a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800473c:	4681      	mov	r9, r0
 800473e:	1813      	adds	r3, r2, r0
 8004740:	2a01      	cmp	r2, #1
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	dc02      	bgt.n	800474c <_printf_float+0x148>
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	07d1      	lsls	r1, r2, #31
 800474a:	d501      	bpl.n	8004750 <_printf_float+0x14c>
 800474c:	3301      	adds	r3, #1
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0a2      	beq.n	800469e <_printf_float+0x9a>
 8004758:	232d      	movs	r3, #45	; 0x2d
 800475a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475e:	e79e      	b.n	800469e <_printf_float+0x9a>
 8004760:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004764:	f000 816e 	beq.w	8004a44 <_printf_float+0x440>
 8004768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800476c:	d1b9      	bne.n	80046e2 <_printf_float+0xde>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1b7      	bne.n	80046e2 <_printf_float+0xde>
 8004772:	2301      	movs	r3, #1
 8004774:	e7b4      	b.n	80046e0 <_printf_float+0xdc>
 8004776:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800477a:	d119      	bne.n	80047b0 <_printf_float+0x1ac>
 800477c:	2900      	cmp	r1, #0
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	dd0c      	ble.n	800479c <_printf_float+0x198>
 8004782:	6121      	str	r1, [r4, #16]
 8004784:	b913      	cbnz	r3, 800478c <_printf_float+0x188>
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	07d2      	lsls	r2, r2, #31
 800478a:	d502      	bpl.n	8004792 <_printf_float+0x18e>
 800478c:	3301      	adds	r3, #1
 800478e:	440b      	add	r3, r1
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004794:	f04f 0900 	mov.w	r9, #0
 8004798:	65a3      	str	r3, [r4, #88]	; 0x58
 800479a:	e7d9      	b.n	8004750 <_printf_float+0x14c>
 800479c:	b913      	cbnz	r3, 80047a4 <_printf_float+0x1a0>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	07d0      	lsls	r0, r2, #31
 80047a2:	d501      	bpl.n	80047a8 <_printf_float+0x1a4>
 80047a4:	3302      	adds	r3, #2
 80047a6:	e7f3      	b.n	8004790 <_printf_float+0x18c>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e7f1      	b.n	8004790 <_printf_float+0x18c>
 80047ac:	f04f 0867 	mov.w	r8, #103	; 0x67
 80047b0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047b4:	4293      	cmp	r3, r2
 80047b6:	db05      	blt.n	80047c4 <_printf_float+0x1c0>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	07d1      	lsls	r1, r2, #31
 80047be:	d5e8      	bpl.n	8004792 <_printf_float+0x18e>
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7e5      	b.n	8004790 <_printf_float+0x18c>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bfcc      	ite	gt
 80047c8:	2301      	movgt	r3, #1
 80047ca:	f1c3 0302 	rsble	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	e7de      	b.n	8004790 <_printf_float+0x18c>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	055a      	lsls	r2, r3, #21
 80047d6:	d407      	bmi.n	80047e8 <_printf_float+0x1e4>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	463a      	mov	r2, r7
 80047dc:	4659      	mov	r1, fp
 80047de:	4628      	mov	r0, r5
 80047e0:	47b0      	blx	r6
 80047e2:	3001      	adds	r0, #1
 80047e4:	d129      	bne.n	800483a <_printf_float+0x236>
 80047e6:	e764      	b.n	80046b2 <_printf_float+0xae>
 80047e8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80047ec:	f240 80d7 	bls.w	800499e <_printf_float+0x39a>
 80047f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	f7fc f8e0 	bl	80009bc <__aeabi_dcmpeq>
 80047fc:	b388      	cbz	r0, 8004862 <_printf_float+0x25e>
 80047fe:	2301      	movs	r3, #1
 8004800:	4a40      	ldr	r2, [pc, #256]	; (8004904 <_printf_float+0x300>)
 8004802:	4659      	mov	r1, fp
 8004804:	4628      	mov	r0, r5
 8004806:	47b0      	blx	r6
 8004808:	3001      	adds	r0, #1
 800480a:	f43f af52 	beq.w	80046b2 <_printf_float+0xae>
 800480e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004812:	429a      	cmp	r2, r3
 8004814:	db02      	blt.n	800481c <_printf_float+0x218>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	07d8      	lsls	r0, r3, #31
 800481a:	d50e      	bpl.n	800483a <_printf_float+0x236>
 800481c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004820:	4659      	mov	r1, fp
 8004822:	4628      	mov	r0, r5
 8004824:	47b0      	blx	r6
 8004826:	3001      	adds	r0, #1
 8004828:	f43f af43 	beq.w	80046b2 <_printf_float+0xae>
 800482c:	2700      	movs	r7, #0
 800482e:	f104 081a 	add.w	r8, r4, #26
 8004832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004834:	3b01      	subs	r3, #1
 8004836:	42bb      	cmp	r3, r7
 8004838:	dc09      	bgt.n	800484e <_printf_float+0x24a>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	079f      	lsls	r7, r3, #30
 800483e:	f100 80fd 	bmi.w	8004a3c <_printf_float+0x438>
 8004842:	68e0      	ldr	r0, [r4, #12]
 8004844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004846:	4298      	cmp	r0, r3
 8004848:	bfb8      	it	lt
 800484a:	4618      	movlt	r0, r3
 800484c:	e733      	b.n	80046b6 <_printf_float+0xb2>
 800484e:	2301      	movs	r3, #1
 8004850:	4642      	mov	r2, r8
 8004852:	4659      	mov	r1, fp
 8004854:	4628      	mov	r0, r5
 8004856:	47b0      	blx	r6
 8004858:	3001      	adds	r0, #1
 800485a:	f43f af2a 	beq.w	80046b2 <_printf_float+0xae>
 800485e:	3701      	adds	r7, #1
 8004860:	e7e7      	b.n	8004832 <_printf_float+0x22e>
 8004862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	dc2b      	bgt.n	80048c0 <_printf_float+0x2bc>
 8004868:	2301      	movs	r3, #1
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <_printf_float+0x300>)
 800486c:	4659      	mov	r1, fp
 800486e:	4628      	mov	r0, r5
 8004870:	47b0      	blx	r6
 8004872:	3001      	adds	r0, #1
 8004874:	f43f af1d 	beq.w	80046b2 <_printf_float+0xae>
 8004878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800487a:	b923      	cbnz	r3, 8004886 <_printf_float+0x282>
 800487c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800487e:	b913      	cbnz	r3, 8004886 <_printf_float+0x282>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	d5d9      	bpl.n	800483a <_printf_float+0x236>
 8004886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488a:	4659      	mov	r1, fp
 800488c:	4628      	mov	r0, r5
 800488e:	47b0      	blx	r6
 8004890:	3001      	adds	r0, #1
 8004892:	f43f af0e 	beq.w	80046b2 <_printf_float+0xae>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	f104 091a 	add.w	r9, r4, #26
 800489e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a0:	425b      	negs	r3, r3
 80048a2:	4543      	cmp	r3, r8
 80048a4:	dc01      	bgt.n	80048aa <_printf_float+0x2a6>
 80048a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a8:	e797      	b.n	80047da <_printf_float+0x1d6>
 80048aa:	2301      	movs	r3, #1
 80048ac:	464a      	mov	r2, r9
 80048ae:	4659      	mov	r1, fp
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b0      	blx	r6
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f aefc 	beq.w	80046b2 <_printf_float+0xae>
 80048ba:	f108 0801 	add.w	r8, r8, #1
 80048be:	e7ee      	b.n	800489e <_printf_float+0x29a>
 80048c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c4:	429a      	cmp	r2, r3
 80048c6:	bfa8      	it	ge
 80048c8:	461a      	movge	r2, r3
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	4690      	mov	r8, r2
 80048ce:	dd07      	ble.n	80048e0 <_printf_float+0x2dc>
 80048d0:	4613      	mov	r3, r2
 80048d2:	4659      	mov	r1, fp
 80048d4:	463a      	mov	r2, r7
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b0      	blx	r6
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f aee9 	beq.w	80046b2 <_printf_float+0xae>
 80048e0:	f104 031a 	add.w	r3, r4, #26
 80048e4:	f04f 0a00 	mov.w	sl, #0
 80048e8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	e015      	b.n	800491c <_printf_float+0x318>
 80048f0:	7fefffff 	.word	0x7fefffff
 80048f4:	08006610 	.word	0x08006610
 80048f8:	0800660c 	.word	0x0800660c
 80048fc:	08006618 	.word	0x08006618
 8004900:	08006614 	.word	0x08006614
 8004904:	0800661c 	.word	0x0800661c
 8004908:	2301      	movs	r3, #1
 800490a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800490c:	4659      	mov	r1, fp
 800490e:	4628      	mov	r0, r5
 8004910:	47b0      	blx	r6
 8004912:	3001      	adds	r0, #1
 8004914:	f43f aecd 	beq.w	80046b2 <_printf_float+0xae>
 8004918:	f10a 0a01 	add.w	sl, sl, #1
 800491c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004920:	eba9 0308 	sub.w	r3, r9, r8
 8004924:	4553      	cmp	r3, sl
 8004926:	dcef      	bgt.n	8004908 <_printf_float+0x304>
 8004928:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800492c:	429a      	cmp	r2, r3
 800492e:	444f      	add	r7, r9
 8004930:	db14      	blt.n	800495c <_printf_float+0x358>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	07da      	lsls	r2, r3, #31
 8004936:	d411      	bmi.n	800495c <_printf_float+0x358>
 8004938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800493a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800493c:	eba3 0209 	sub.w	r2, r3, r9
 8004940:	eba3 0901 	sub.w	r9, r3, r1
 8004944:	4591      	cmp	r9, r2
 8004946:	bfa8      	it	ge
 8004948:	4691      	movge	r9, r2
 800494a:	f1b9 0f00 	cmp.w	r9, #0
 800494e:	dc0d      	bgt.n	800496c <_printf_float+0x368>
 8004950:	2700      	movs	r7, #0
 8004952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004956:	f104 081a 	add.w	r8, r4, #26
 800495a:	e018      	b.n	800498e <_printf_float+0x38a>
 800495c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004960:	4659      	mov	r1, fp
 8004962:	4628      	mov	r0, r5
 8004964:	47b0      	blx	r6
 8004966:	3001      	adds	r0, #1
 8004968:	d1e6      	bne.n	8004938 <_printf_float+0x334>
 800496a:	e6a2      	b.n	80046b2 <_printf_float+0xae>
 800496c:	464b      	mov	r3, r9
 800496e:	463a      	mov	r2, r7
 8004970:	4659      	mov	r1, fp
 8004972:	4628      	mov	r0, r5
 8004974:	47b0      	blx	r6
 8004976:	3001      	adds	r0, #1
 8004978:	d1ea      	bne.n	8004950 <_printf_float+0x34c>
 800497a:	e69a      	b.n	80046b2 <_printf_float+0xae>
 800497c:	2301      	movs	r3, #1
 800497e:	4642      	mov	r2, r8
 8004980:	4659      	mov	r1, fp
 8004982:	4628      	mov	r0, r5
 8004984:	47b0      	blx	r6
 8004986:	3001      	adds	r0, #1
 8004988:	f43f ae93 	beq.w	80046b2 <_printf_float+0xae>
 800498c:	3701      	adds	r7, #1
 800498e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	eba3 0309 	sub.w	r3, r3, r9
 8004998:	42bb      	cmp	r3, r7
 800499a:	dcef      	bgt.n	800497c <_printf_float+0x378>
 800499c:	e74d      	b.n	800483a <_printf_float+0x236>
 800499e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a0:	2a01      	cmp	r2, #1
 80049a2:	dc01      	bgt.n	80049a8 <_printf_float+0x3a4>
 80049a4:	07db      	lsls	r3, r3, #31
 80049a6:	d538      	bpl.n	8004a1a <_printf_float+0x416>
 80049a8:	2301      	movs	r3, #1
 80049aa:	463a      	mov	r2, r7
 80049ac:	4659      	mov	r1, fp
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b0      	blx	r6
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f ae7d 	beq.w	80046b2 <_printf_float+0xae>
 80049b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049bc:	4659      	mov	r1, fp
 80049be:	4628      	mov	r0, r5
 80049c0:	47b0      	blx	r6
 80049c2:	3001      	adds	r0, #1
 80049c4:	f107 0701 	add.w	r7, r7, #1
 80049c8:	f43f ae73 	beq.w	80046b2 <_printf_float+0xae>
 80049cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049d2:	2200      	movs	r2, #0
 80049d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80049d8:	2300      	movs	r3, #0
 80049da:	f7fb ffef 	bl	80009bc <__aeabi_dcmpeq>
 80049de:	b9c0      	cbnz	r0, 8004a12 <_printf_float+0x40e>
 80049e0:	4643      	mov	r3, r8
 80049e2:	463a      	mov	r2, r7
 80049e4:	4659      	mov	r1, fp
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	3001      	adds	r0, #1
 80049ec:	d10d      	bne.n	8004a0a <_printf_float+0x406>
 80049ee:	e660      	b.n	80046b2 <_printf_float+0xae>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4642      	mov	r2, r8
 80049f4:	4659      	mov	r1, fp
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b0      	blx	r6
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f ae59 	beq.w	80046b2 <_printf_float+0xae>
 8004a00:	3701      	adds	r7, #1
 8004a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a04:	3b01      	subs	r3, #1
 8004a06:	42bb      	cmp	r3, r7
 8004a08:	dcf2      	bgt.n	80049f0 <_printf_float+0x3ec>
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a10:	e6e4      	b.n	80047dc <_printf_float+0x1d8>
 8004a12:	2700      	movs	r7, #0
 8004a14:	f104 081a 	add.w	r8, r4, #26
 8004a18:	e7f3      	b.n	8004a02 <_printf_float+0x3fe>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e7e1      	b.n	80049e2 <_printf_float+0x3de>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4642      	mov	r2, r8
 8004a22:	4659      	mov	r1, fp
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b0      	blx	r6
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f ae42 	beq.w	80046b2 <_printf_float+0xae>
 8004a2e:	3701      	adds	r7, #1
 8004a30:	68e3      	ldr	r3, [r4, #12]
 8004a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	42bb      	cmp	r3, r7
 8004a38:	dcf1      	bgt.n	8004a1e <_printf_float+0x41a>
 8004a3a:	e702      	b.n	8004842 <_printf_float+0x23e>
 8004a3c:	2700      	movs	r7, #0
 8004a3e:	f104 0819 	add.w	r8, r4, #25
 8004a42:	e7f5      	b.n	8004a30 <_printf_float+0x42c>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f43f ae94 	beq.w	8004772 <_printf_float+0x16e>
 8004a4a:	f04f 0c00 	mov.w	ip, #0
 8004a4e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a52:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004a5c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	463a      	mov	r2, r7
 8004a64:	464b      	mov	r3, r9
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff fd3a 	bl	80044e0 <__cvt>
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	e64f      	b.n	8004710 <_printf_float+0x10c>

08004a70 <_printf_common>:
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	4691      	mov	r9, r2
 8004a76:	461f      	mov	r7, r3
 8004a78:	688a      	ldr	r2, [r1, #8]
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	bfb8      	it	lt
 8004a82:	4613      	movlt	r3, r2
 8004a84:	f8c9 3000 	str.w	r3, [r9]
 8004a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a92:	b112      	cbz	r2, 8004a9a <_printf_common+0x2a>
 8004a94:	3301      	adds	r3, #1
 8004a96:	f8c9 3000 	str.w	r3, [r9]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	0699      	lsls	r1, r3, #26
 8004a9e:	bf42      	ittt	mi
 8004aa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004aa4:	3302      	addmi	r3, #2
 8004aa6:	f8c9 3000 	strmi.w	r3, [r9]
 8004aaa:	6825      	ldr	r5, [r4, #0]
 8004aac:	f015 0506 	ands.w	r5, r5, #6
 8004ab0:	d107      	bne.n	8004ac2 <_printf_common+0x52>
 8004ab2:	f104 0a19 	add.w	sl, r4, #25
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	42ab      	cmp	r3, r5
 8004ac0:	dc29      	bgt.n	8004b16 <_printf_common+0xa6>
 8004ac2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	3300      	adds	r3, #0
 8004aca:	bf18      	it	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	0692      	lsls	r2, r2, #26
 8004ad0:	d42e      	bmi.n	8004b30 <_printf_common+0xc0>
 8004ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	4630      	mov	r0, r6
 8004ada:	47c0      	blx	r8
 8004adc:	3001      	adds	r0, #1
 8004ade:	d021      	beq.n	8004b24 <_printf_common+0xb4>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	68e5      	ldr	r5, [r4, #12]
 8004ae4:	f003 0306 	and.w	r3, r3, #6
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	bf18      	it	ne
 8004aec:	2500      	movne	r5, #0
 8004aee:	f8d9 2000 	ldr.w	r2, [r9]
 8004af2:	f04f 0900 	mov.w	r9, #0
 8004af6:	bf08      	it	eq
 8004af8:	1aad      	subeq	r5, r5, r2
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf08      	it	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfc4      	itt	gt
 8004b08:	1a9b      	subgt	r3, r3, r2
 8004b0a:	18ed      	addgt	r5, r5, r3
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	454d      	cmp	r5, r9
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xd8>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xb8>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xbc>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c2      	b.n	8004ab6 <_printf_common+0x46>
 8004b30:	2030      	movs	r0, #48	; 0x30
 8004b32:	18e1      	adds	r1, r4, r3
 8004b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b3e:	4422      	add	r2, r4
 8004b40:	3302      	adds	r3, #2
 8004b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b46:	e7c4      	b.n	8004ad2 <_printf_common+0x62>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	4630      	mov	r0, r6
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xb4>
 8004b56:	f109 0901 	add.w	r9, r9, #1
 8004b5a:	e7d8      	b.n	8004b0e <_printf_common+0x9e>

08004b5c <_printf_i>:
 8004b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b64:	460c      	mov	r4, r1
 8004b66:	7e09      	ldrb	r1, [r1, #24]
 8004b68:	b085      	sub	sp, #20
 8004b6a:	296e      	cmp	r1, #110	; 0x6e
 8004b6c:	4617      	mov	r7, r2
 8004b6e:	4606      	mov	r6, r0
 8004b70:	4698      	mov	r8, r3
 8004b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b74:	f000 80b3 	beq.w	8004cde <_printf_i+0x182>
 8004b78:	d822      	bhi.n	8004bc0 <_printf_i+0x64>
 8004b7a:	2963      	cmp	r1, #99	; 0x63
 8004b7c:	d036      	beq.n	8004bec <_printf_i+0x90>
 8004b7e:	d80a      	bhi.n	8004b96 <_printf_i+0x3a>
 8004b80:	2900      	cmp	r1, #0
 8004b82:	f000 80b9 	beq.w	8004cf8 <_printf_i+0x19c>
 8004b86:	2958      	cmp	r1, #88	; 0x58
 8004b88:	f000 8083 	beq.w	8004c92 <_printf_i+0x136>
 8004b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b94:	e032      	b.n	8004bfc <_printf_i+0xa0>
 8004b96:	2964      	cmp	r1, #100	; 0x64
 8004b98:	d001      	beq.n	8004b9e <_printf_i+0x42>
 8004b9a:	2969      	cmp	r1, #105	; 0x69
 8004b9c:	d1f6      	bne.n	8004b8c <_printf_i+0x30>
 8004b9e:	6820      	ldr	r0, [r4, #0]
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	0605      	lsls	r5, r0, #24
 8004ba4:	f103 0104 	add.w	r1, r3, #4
 8004ba8:	d52a      	bpl.n	8004c00 <_printf_i+0xa4>
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da03      	bge.n	8004bba <_printf_i+0x5e>
 8004bb2:	222d      	movs	r2, #45	; 0x2d
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bba:	486f      	ldr	r0, [pc, #444]	; (8004d78 <_printf_i+0x21c>)
 8004bbc:	220a      	movs	r2, #10
 8004bbe:	e039      	b.n	8004c34 <_printf_i+0xd8>
 8004bc0:	2973      	cmp	r1, #115	; 0x73
 8004bc2:	f000 809d 	beq.w	8004d00 <_printf_i+0x1a4>
 8004bc6:	d808      	bhi.n	8004bda <_printf_i+0x7e>
 8004bc8:	296f      	cmp	r1, #111	; 0x6f
 8004bca:	d020      	beq.n	8004c0e <_printf_i+0xb2>
 8004bcc:	2970      	cmp	r1, #112	; 0x70
 8004bce:	d1dd      	bne.n	8004b8c <_printf_i+0x30>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	e003      	b.n	8004be2 <_printf_i+0x86>
 8004bda:	2975      	cmp	r1, #117	; 0x75
 8004bdc:	d017      	beq.n	8004c0e <_printf_i+0xb2>
 8004bde:	2978      	cmp	r1, #120	; 0x78
 8004be0:	d1d4      	bne.n	8004b8c <_printf_i+0x30>
 8004be2:	2378      	movs	r3, #120	; 0x78
 8004be4:	4865      	ldr	r0, [pc, #404]	; (8004d7c <_printf_i+0x220>)
 8004be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bea:	e055      	b.n	8004c98 <_printf_i+0x13c>
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf2:	1d19      	adds	r1, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6011      	str	r1, [r2, #0]
 8004bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e08c      	b.n	8004d1a <_printf_i+0x1be>
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c06:	6011      	str	r1, [r2, #0]
 8004c08:	bf18      	it	ne
 8004c0a:	b21b      	sxthne	r3, r3
 8004c0c:	e7cf      	b.n	8004bae <_printf_i+0x52>
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	6825      	ldr	r5, [r4, #0]
 8004c12:	1d18      	adds	r0, r3, #4
 8004c14:	6010      	str	r0, [r2, #0]
 8004c16:	0628      	lsls	r0, r5, #24
 8004c18:	d501      	bpl.n	8004c1e <_printf_i+0xc2>
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	e002      	b.n	8004c24 <_printf_i+0xc8>
 8004c1e:	0668      	lsls	r0, r5, #25
 8004c20:	d5fb      	bpl.n	8004c1a <_printf_i+0xbe>
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	296f      	cmp	r1, #111	; 0x6f
 8004c26:	bf14      	ite	ne
 8004c28:	220a      	movne	r2, #10
 8004c2a:	2208      	moveq	r2, #8
 8004c2c:	4852      	ldr	r0, [pc, #328]	; (8004d78 <_printf_i+0x21c>)
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c34:	6865      	ldr	r5, [r4, #4]
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	60a5      	str	r5, [r4, #8]
 8004c3a:	f2c0 8095 	blt.w	8004d68 <_printf_i+0x20c>
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	f021 0104 	bic.w	r1, r1, #4
 8004c44:	6021      	str	r1, [r4, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d13d      	bne.n	8004cc6 <_printf_i+0x16a>
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	f040 808e 	bne.w	8004d6c <_printf_i+0x210>
 8004c50:	4665      	mov	r5, ip
 8004c52:	2a08      	cmp	r2, #8
 8004c54:	d10b      	bne.n	8004c6e <_printf_i+0x112>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	07db      	lsls	r3, r3, #31
 8004c5a:	d508      	bpl.n	8004c6e <_printf_i+0x112>
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	bfde      	ittt	le
 8004c64:	2330      	movle	r3, #48	; 0x30
 8004c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c6e:	ebac 0305 	sub.w	r3, ip, r5
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	f8cd 8000 	str.w	r8, [sp]
 8004c78:	463b      	mov	r3, r7
 8004c7a:	aa03      	add	r2, sp, #12
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7ff fef6 	bl	8004a70 <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d14d      	bne.n	8004d24 <_printf_i+0x1c8>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	b005      	add	sp, #20
 8004c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c92:	4839      	ldr	r0, [pc, #228]	; (8004d78 <_printf_i+0x21c>)
 8004c94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	1d1d      	adds	r5, r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6015      	str	r5, [r2, #0]
 8004ca2:	060a      	lsls	r2, r1, #24
 8004ca4:	d50b      	bpl.n	8004cbe <_printf_i+0x162>
 8004ca6:	07ca      	lsls	r2, r1, #31
 8004ca8:	bf44      	itt	mi
 8004caa:	f041 0120 	orrmi.w	r1, r1, #32
 8004cae:	6021      	strmi	r1, [r4, #0]
 8004cb0:	b91b      	cbnz	r3, 8004cba <_printf_i+0x15e>
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	f022 0220 	bic.w	r2, r2, #32
 8004cb8:	6022      	str	r2, [r4, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	e7b7      	b.n	8004c2e <_printf_i+0xd2>
 8004cbe:	064d      	lsls	r5, r1, #25
 8004cc0:	bf48      	it	mi
 8004cc2:	b29b      	uxthmi	r3, r3
 8004cc4:	e7ef      	b.n	8004ca6 <_printf_i+0x14a>
 8004cc6:	4665      	mov	r5, ip
 8004cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ccc:	fb02 3311 	mls	r3, r2, r1, r3
 8004cd0:	5cc3      	ldrb	r3, [r0, r3]
 8004cd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d1f5      	bne.n	8004cc8 <_printf_i+0x16c>
 8004cdc:	e7b9      	b.n	8004c52 <_printf_i+0xf6>
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	6825      	ldr	r5, [r4, #0]
 8004ce2:	1d18      	adds	r0, r3, #4
 8004ce4:	6961      	ldr	r1, [r4, #20]
 8004ce6:	6010      	str	r0, [r2, #0]
 8004ce8:	0628      	lsls	r0, r5, #24
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	d501      	bpl.n	8004cf2 <_printf_i+0x196>
 8004cee:	6019      	str	r1, [r3, #0]
 8004cf0:	e002      	b.n	8004cf8 <_printf_i+0x19c>
 8004cf2:	066a      	lsls	r2, r5, #25
 8004cf4:	d5fb      	bpl.n	8004cee <_printf_i+0x192>
 8004cf6:	8019      	strh	r1, [r3, #0]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4665      	mov	r5, ip
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	e7b9      	b.n	8004c74 <_printf_i+0x118>
 8004d00:	6813      	ldr	r3, [r2, #0]
 8004d02:	1d19      	adds	r1, r3, #4
 8004d04:	6011      	str	r1, [r2, #0]
 8004d06:	681d      	ldr	r5, [r3, #0]
 8004d08:	6862      	ldr	r2, [r4, #4]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 feb9 	bl	8005a84 <memchr>
 8004d12:	b108      	cbz	r0, 8004d18 <_printf_i+0x1bc>
 8004d14:	1b40      	subs	r0, r0, r5
 8004d16:	6060      	str	r0, [r4, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d22:	e7a7      	b.n	8004c74 <_printf_i+0x118>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	462a      	mov	r2, r5
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0aa      	beq.n	8004c88 <_printf_i+0x12c>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	079b      	lsls	r3, r3, #30
 8004d36:	d413      	bmi.n	8004d60 <_printf_i+0x204>
 8004d38:	68e0      	ldr	r0, [r4, #12]
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	4298      	cmp	r0, r3
 8004d3e:	bfb8      	it	lt
 8004d40:	4618      	movlt	r0, r3
 8004d42:	e7a3      	b.n	8004c8c <_printf_i+0x130>
 8004d44:	2301      	movs	r3, #1
 8004d46:	464a      	mov	r2, r9
 8004d48:	4639      	mov	r1, r7
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	47c0      	blx	r8
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d09a      	beq.n	8004c88 <_printf_i+0x12c>
 8004d52:	3501      	adds	r5, #1
 8004d54:	68e3      	ldr	r3, [r4, #12]
 8004d56:	9a03      	ldr	r2, [sp, #12]
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	42ab      	cmp	r3, r5
 8004d5c:	dcf2      	bgt.n	8004d44 <_printf_i+0x1e8>
 8004d5e:	e7eb      	b.n	8004d38 <_printf_i+0x1dc>
 8004d60:	2500      	movs	r5, #0
 8004d62:	f104 0919 	add.w	r9, r4, #25
 8004d66:	e7f5      	b.n	8004d54 <_printf_i+0x1f8>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ac      	bne.n	8004cc6 <_printf_i+0x16a>
 8004d6c:	7803      	ldrb	r3, [r0, #0]
 8004d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d76:	e76c      	b.n	8004c52 <_printf_i+0xf6>
 8004d78:	0800661e 	.word	0x0800661e
 8004d7c:	0800662f 	.word	0x0800662f

08004d80 <siprintf>:
 8004d80:	b40e      	push	{r1, r2, r3}
 8004d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d86:	b500      	push	{lr}
 8004d88:	b09c      	sub	sp, #112	; 0x70
 8004d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	9006      	str	r0, [sp, #24]
 8004d90:	9107      	str	r1, [sp, #28]
 8004d92:	9104      	str	r1, [sp, #16]
 8004d94:	4808      	ldr	r0, [pc, #32]	; (8004db8 <siprintf+0x38>)
 8004d96:	4909      	ldr	r1, [pc, #36]	; (8004dbc <siprintf+0x3c>)
 8004d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d9c:	9105      	str	r1, [sp, #20]
 8004d9e:	6800      	ldr	r0, [r0, #0]
 8004da0:	a902      	add	r1, sp, #8
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	f001 fa72 	bl	800628c <_svfiprintf_r>
 8004da8:	2200      	movs	r2, #0
 8004daa:	9b02      	ldr	r3, [sp, #8]
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	b01c      	add	sp, #112	; 0x70
 8004db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db4:	b003      	add	sp, #12
 8004db6:	4770      	bx	lr
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	ffff0208 	.word	0xffff0208

08004dc0 <strcpy>:
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dc6:	f803 2b01 	strb.w	r2, [r3], #1
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	d1f9      	bne.n	8004dc2 <strcpy+0x2>
 8004dce:	4770      	bx	lr

08004dd0 <quorem>:
 8004dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	6903      	ldr	r3, [r0, #16]
 8004dd6:	690c      	ldr	r4, [r1, #16]
 8004dd8:	4680      	mov	r8, r0
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	f2c0 8084 	blt.w	8004ee8 <quorem+0x118>
 8004de0:	3c01      	subs	r4, #1
 8004de2:	f101 0714 	add.w	r7, r1, #20
 8004de6:	f100 0614 	add.w	r6, r0, #20
 8004dea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004dee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004df2:	3501      	adds	r5, #1
 8004df4:	fbb0 f5f5 	udiv	r5, r0, r5
 8004df8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004dfc:	eb06 030c 	add.w	r3, r6, ip
 8004e00:	eb07 090c 	add.w	r9, r7, ip
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	b39d      	cbz	r5, 8004e70 <quorem+0xa0>
 8004e08:	f04f 0a00 	mov.w	sl, #0
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	46b6      	mov	lr, r6
 8004e10:	46d3      	mov	fp, sl
 8004e12:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e16:	b293      	uxth	r3, r2
 8004e18:	fb05 a303 	mla	r3, r5, r3, sl
 8004e1c:	0c12      	lsrs	r2, r2, #16
 8004e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e22:	fb05 a202 	mla	r2, r5, r2, sl
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	ebab 0303 	sub.w	r3, fp, r3
 8004e2c:	f8de b000 	ldr.w	fp, [lr]
 8004e30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e34:	fa1f fb8b 	uxth.w	fp, fp
 8004e38:	445b      	add	r3, fp
 8004e3a:	fa1f fb82 	uxth.w	fp, r2
 8004e3e:	f8de 2000 	ldr.w	r2, [lr]
 8004e42:	4581      	cmp	r9, r0
 8004e44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e52:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e56:	f84e 3b04 	str.w	r3, [lr], #4
 8004e5a:	d2da      	bcs.n	8004e12 <quorem+0x42>
 8004e5c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e60:	b933      	cbnz	r3, 8004e70 <quorem+0xa0>
 8004e62:	9b01      	ldr	r3, [sp, #4]
 8004e64:	3b04      	subs	r3, #4
 8004e66:	429e      	cmp	r6, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	d331      	bcc.n	8004ed0 <quorem+0x100>
 8004e6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e70:	4640      	mov	r0, r8
 8004e72:	f001 f835 	bl	8005ee0 <__mcmp>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	db26      	blt.n	8004ec8 <quorem+0xf8>
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f04f 0c00 	mov.w	ip, #0
 8004e80:	3501      	adds	r5, #1
 8004e82:	f857 1b04 	ldr.w	r1, [r7], #4
 8004e86:	f8d0 e000 	ldr.w	lr, [r0]
 8004e8a:	b28b      	uxth	r3, r1
 8004e8c:	ebac 0303 	sub.w	r3, ip, r3
 8004e90:	fa1f f28e 	uxth.w	r2, lr
 8004e94:	4413      	add	r3, r2
 8004e96:	0c0a      	lsrs	r2, r1, #16
 8004e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ea6:	45b9      	cmp	r9, r7
 8004ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004eac:	f840 3b04 	str.w	r3, [r0], #4
 8004eb0:	d2e7      	bcs.n	8004e82 <quorem+0xb2>
 8004eb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004eb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004eba:	b92a      	cbnz	r2, 8004ec8 <quorem+0xf8>
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	429e      	cmp	r6, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	d30b      	bcc.n	8004edc <quorem+0x10c>
 8004ec4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ec8:	4628      	mov	r0, r5
 8004eca:	b003      	add	sp, #12
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	d1c9      	bne.n	8004e6c <quorem+0x9c>
 8004ed8:	3c01      	subs	r4, #1
 8004eda:	e7c4      	b.n	8004e66 <quorem+0x96>
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d1ef      	bne.n	8004ec4 <quorem+0xf4>
 8004ee4:	3c01      	subs	r4, #1
 8004ee6:	e7ea      	b.n	8004ebe <quorem+0xee>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7ee      	b.n	8004eca <quorem+0xfa>
 8004eec:	0000      	movs	r0, r0
	...

08004ef0 <_dtoa_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004efa:	b095      	sub	sp, #84	; 0x54
 8004efc:	4604      	mov	r4, r0
 8004efe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004f02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f06:	b93d      	cbnz	r5, 8004f18 <_dtoa_r+0x28>
 8004f08:	2010      	movs	r0, #16
 8004f0a:	f000 fdb3 	bl	8005a74 <malloc>
 8004f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f14:	6005      	str	r5, [r0, #0]
 8004f16:	60c5      	str	r5, [r0, #12]
 8004f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	b151      	cbz	r1, 8004f34 <_dtoa_r+0x44>
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	2301      	movs	r3, #1
 8004f22:	4093      	lsls	r3, r2
 8004f24:	604a      	str	r2, [r1, #4]
 8004f26:	608b      	str	r3, [r1, #8]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f000 fdf8 	bl	8005b1e <_Bfree>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	1e3b      	subs	r3, r7, #0
 8004f36:	bfaf      	iteee	ge
 8004f38:	2300      	movge	r3, #0
 8004f3a:	2201      	movlt	r2, #1
 8004f3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f40:	9303      	strlt	r3, [sp, #12]
 8004f42:	bfac      	ite	ge
 8004f44:	f8c8 3000 	strge.w	r3, [r8]
 8004f48:	f8c8 2000 	strlt.w	r2, [r8]
 8004f4c:	4bae      	ldr	r3, [pc, #696]	; (8005208 <_dtoa_r+0x318>)
 8004f4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f52:	ea33 0308 	bics.w	r3, r3, r8
 8004f56:	d11b      	bne.n	8004f90 <_dtoa_r+0xa0>
 8004f58:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	b923      	cbnz	r3, 8004f6e <_dtoa_r+0x7e>
 8004f64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	f000 8545 	beq.w	80059f8 <_dtoa_r+0xb08>
 8004f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f70:	b953      	cbnz	r3, 8004f88 <_dtoa_r+0x98>
 8004f72:	4ba6      	ldr	r3, [pc, #664]	; (800520c <_dtoa_r+0x31c>)
 8004f74:	e021      	b.n	8004fba <_dtoa_r+0xca>
 8004f76:	4ba6      	ldr	r3, [pc, #664]	; (8005210 <_dtoa_r+0x320>)
 8004f78:	9306      	str	r3, [sp, #24]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	9806      	ldr	r0, [sp, #24]
 8004f82:	b015      	add	sp, #84	; 0x54
 8004f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f88:	4ba0      	ldr	r3, [pc, #640]	; (800520c <_dtoa_r+0x31c>)
 8004f8a:	9306      	str	r3, [sp, #24]
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	e7f5      	b.n	8004f7c <_dtoa_r+0x8c>
 8004f90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2300      	movs	r3, #0
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb fd0e 	bl	80009bc <__aeabi_dcmpeq>
 8004fa0:	4682      	mov	sl, r0
 8004fa2:	b160      	cbz	r0, 8004fbe <_dtoa_r+0xce>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8520 	beq.w	80059f2 <_dtoa_r+0xb02>
 8004fb2:	4b98      	ldr	r3, [pc, #608]	; (8005214 <_dtoa_r+0x324>)
 8004fb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	9306      	str	r3, [sp, #24]
 8004fbc:	e7e0      	b.n	8004f80 <_dtoa_r+0x90>
 8004fbe:	ab12      	add	r3, sp, #72	; 0x48
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	ab13      	add	r3, sp, #76	; 0x4c
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	463b      	mov	r3, r7
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f001 f800 	bl	8005fd0 <__d2b>
 8004fd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004fd4:	4683      	mov	fp, r0
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	d07d      	beq.n	80050d6 <_dtoa_r+0x1e6>
 8004fda:	46b0      	mov	r8, r6
 8004fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fe0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004fe4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004fe8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004fec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4b89      	ldr	r3, [pc, #548]	; (8005218 <_dtoa_r+0x328>)
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	f7fb f8c0 	bl	800017c <__aeabi_dsub>
 8004ffc:	a37c      	add	r3, pc, #496	; (adr r3, 80051f0 <_dtoa_r+0x300>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7fb fa73 	bl	80004ec <__aeabi_dmul>
 8005006:	a37c      	add	r3, pc, #496	; (adr r3, 80051f8 <_dtoa_r+0x308>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f7fb f8b8 	bl	8000180 <__adddf3>
 8005010:	4606      	mov	r6, r0
 8005012:	4628      	mov	r0, r5
 8005014:	460f      	mov	r7, r1
 8005016:	f7fb f9ff 	bl	8000418 <__aeabi_i2d>
 800501a:	a379      	add	r3, pc, #484	; (adr r3, 8005200 <_dtoa_r+0x310>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb fa64 	bl	80004ec <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4630      	mov	r0, r6
 800502a:	4639      	mov	r1, r7
 800502c:	f7fb f8a8 	bl	8000180 <__adddf3>
 8005030:	4606      	mov	r6, r0
 8005032:	460f      	mov	r7, r1
 8005034:	f7fb fd0a 	bl	8000a4c <__aeabi_d2iz>
 8005038:	2200      	movs	r2, #0
 800503a:	4682      	mov	sl, r0
 800503c:	2300      	movs	r3, #0
 800503e:	4630      	mov	r0, r6
 8005040:	4639      	mov	r1, r7
 8005042:	f7fb fcc5 	bl	80009d0 <__aeabi_dcmplt>
 8005046:	b148      	cbz	r0, 800505c <_dtoa_r+0x16c>
 8005048:	4650      	mov	r0, sl
 800504a:	f7fb f9e5 	bl	8000418 <__aeabi_i2d>
 800504e:	4632      	mov	r2, r6
 8005050:	463b      	mov	r3, r7
 8005052:	f7fb fcb3 	bl	80009bc <__aeabi_dcmpeq>
 8005056:	b908      	cbnz	r0, 800505c <_dtoa_r+0x16c>
 8005058:	f10a 3aff 	add.w	sl, sl, #4294967295
 800505c:	f1ba 0f16 	cmp.w	sl, #22
 8005060:	d85a      	bhi.n	8005118 <_dtoa_r+0x228>
 8005062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005066:	496d      	ldr	r1, [pc, #436]	; (800521c <_dtoa_r+0x32c>)
 8005068:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800506c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005070:	f7fb fccc 	bl	8000a0c <__aeabi_dcmpgt>
 8005074:	2800      	cmp	r0, #0
 8005076:	d051      	beq.n	800511c <_dtoa_r+0x22c>
 8005078:	2300      	movs	r3, #0
 800507a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800507e:	930d      	str	r3, [sp, #52]	; 0x34
 8005080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005082:	1b5d      	subs	r5, r3, r5
 8005084:	1e6b      	subs	r3, r5, #1
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	bf43      	ittte	mi
 800508a:	2300      	movmi	r3, #0
 800508c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005090:	9307      	strmi	r3, [sp, #28]
 8005092:	f04f 0900 	movpl.w	r9, #0
 8005096:	f1ba 0f00 	cmp.w	sl, #0
 800509a:	db41      	blt.n	8005120 <_dtoa_r+0x230>
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80050a2:	4453      	add	r3, sl
 80050a4:	9307      	str	r3, [sp, #28]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9308      	str	r3, [sp, #32]
 80050aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050ac:	2b09      	cmp	r3, #9
 80050ae:	f200 808f 	bhi.w	80051d0 <_dtoa_r+0x2e0>
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	bfc4      	itt	gt
 80050b6:	3b04      	subgt	r3, #4
 80050b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80050ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050bc:	bfc8      	it	gt
 80050be:	2500      	movgt	r5, #0
 80050c0:	f1a3 0302 	sub.w	r3, r3, #2
 80050c4:	bfd8      	it	le
 80050c6:	2501      	movle	r5, #1
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	f200 808d 	bhi.w	80051e8 <_dtoa_r+0x2f8>
 80050ce:	e8df f003 	tbb	[pc, r3]
 80050d2:	7d7b      	.short	0x7d7b
 80050d4:	6f2f      	.short	0x6f2f
 80050d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80050da:	441d      	add	r5, r3
 80050dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80050e0:	2820      	cmp	r0, #32
 80050e2:	dd13      	ble.n	800510c <_dtoa_r+0x21c>
 80050e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80050e8:	9b02      	ldr	r3, [sp, #8]
 80050ea:	fa08 f800 	lsl.w	r8, r8, r0
 80050ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80050f2:	fa23 f000 	lsr.w	r0, r3, r0
 80050f6:	ea48 0000 	orr.w	r0, r8, r0
 80050fa:	f7fb f97d 	bl	80003f8 <__aeabi_ui2d>
 80050fe:	2301      	movs	r3, #1
 8005100:	4680      	mov	r8, r0
 8005102:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005106:	3d01      	subs	r5, #1
 8005108:	9310      	str	r3, [sp, #64]	; 0x40
 800510a:	e771      	b.n	8004ff0 <_dtoa_r+0x100>
 800510c:	9b02      	ldr	r3, [sp, #8]
 800510e:	f1c0 0020 	rsb	r0, r0, #32
 8005112:	fa03 f000 	lsl.w	r0, r3, r0
 8005116:	e7f0      	b.n	80050fa <_dtoa_r+0x20a>
 8005118:	2301      	movs	r3, #1
 800511a:	e7b0      	b.n	800507e <_dtoa_r+0x18e>
 800511c:	900d      	str	r0, [sp, #52]	; 0x34
 800511e:	e7af      	b.n	8005080 <_dtoa_r+0x190>
 8005120:	f1ca 0300 	rsb	r3, sl, #0
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	2300      	movs	r3, #0
 8005128:	eba9 090a 	sub.w	r9, r9, sl
 800512c:	930c      	str	r3, [sp, #48]	; 0x30
 800512e:	e7bc      	b.n	80050aa <_dtoa_r+0x1ba>
 8005130:	2301      	movs	r3, #1
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
 8005134:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005136:	2b00      	cmp	r3, #0
 8005138:	dd74      	ble.n	8005224 <_dtoa_r+0x334>
 800513a:	4698      	mov	r8, r3
 800513c:	9304      	str	r3, [sp, #16]
 800513e:	2200      	movs	r2, #0
 8005140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005142:	6072      	str	r2, [r6, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	f102 0014 	add.w	r0, r2, #20
 800514a:	4298      	cmp	r0, r3
 800514c:	6871      	ldr	r1, [r6, #4]
 800514e:	d96e      	bls.n	800522e <_dtoa_r+0x33e>
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fcb0 	bl	8005ab6 <_Balloc>
 8005156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b8 0f0e 	cmp.w	r8, #14
 8005160:	9306      	str	r3, [sp, #24]
 8005162:	f200 80ed 	bhi.w	8005340 <_dtoa_r+0x450>
 8005166:	2d00      	cmp	r5, #0
 8005168:	f000 80ea 	beq.w	8005340 <_dtoa_r+0x450>
 800516c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005178:	dd77      	ble.n	800526a <_dtoa_r+0x37a>
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <_dtoa_r+0x32c>)
 800517c:	f00a 030f 	and.w	r3, sl, #15
 8005180:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005188:	06f0      	lsls	r0, r6, #27
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005192:	d568      	bpl.n	8005266 <_dtoa_r+0x376>
 8005194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <_dtoa_r+0x330>)
 800519a:	2503      	movs	r5, #3
 800519c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a0:	f7fb face 	bl	8000740 <__aeabi_ddiv>
 80051a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051a8:	f006 060f 	and.w	r6, r6, #15
 80051ac:	4f1c      	ldr	r7, [pc, #112]	; (8005220 <_dtoa_r+0x330>)
 80051ae:	e04f      	b.n	8005250 <_dtoa_r+0x360>
 80051b0:	2301      	movs	r3, #1
 80051b2:	9309      	str	r3, [sp, #36]	; 0x24
 80051b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051b6:	4453      	add	r3, sl
 80051b8:	f103 0801 	add.w	r8, r3, #1
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	4643      	mov	r3, r8
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	bfb8      	it	lt
 80051c4:	2301      	movlt	r3, #1
 80051c6:	e7ba      	b.n	800513e <_dtoa_r+0x24e>
 80051c8:	2300      	movs	r3, #0
 80051ca:	e7b2      	b.n	8005132 <_dtoa_r+0x242>
 80051cc:	2300      	movs	r3, #0
 80051ce:	e7f0      	b.n	80051b2 <_dtoa_r+0x2c2>
 80051d0:	2501      	movs	r5, #1
 80051d2:	2300      	movs	r3, #0
 80051d4:	9509      	str	r5, [sp, #36]	; 0x24
 80051d6:	931e      	str	r3, [sp, #120]	; 0x78
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	2200      	movs	r2, #0
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	4698      	mov	r8, r3
 80051e2:	2312      	movs	r3, #18
 80051e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80051e6:	e7aa      	b.n	800513e <_dtoa_r+0x24e>
 80051e8:	2301      	movs	r3, #1
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	e7f4      	b.n	80051d8 <_dtoa_r+0x2e8>
 80051ee:	bf00      	nop
 80051f0:	636f4361 	.word	0x636f4361
 80051f4:	3fd287a7 	.word	0x3fd287a7
 80051f8:	8b60c8b3 	.word	0x8b60c8b3
 80051fc:	3fc68a28 	.word	0x3fc68a28
 8005200:	509f79fb 	.word	0x509f79fb
 8005204:	3fd34413 	.word	0x3fd34413
 8005208:	7ff00000 	.word	0x7ff00000
 800520c:	08006649 	.word	0x08006649
 8005210:	08006640 	.word	0x08006640
 8005214:	0800661d 	.word	0x0800661d
 8005218:	3ff80000 	.word	0x3ff80000
 800521c:	08006678 	.word	0x08006678
 8005220:	08006650 	.word	0x08006650
 8005224:	2301      	movs	r3, #1
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	4698      	mov	r8, r3
 800522a:	461a      	mov	r2, r3
 800522c:	e7da      	b.n	80051e4 <_dtoa_r+0x2f4>
 800522e:	3101      	adds	r1, #1
 8005230:	6071      	str	r1, [r6, #4]
 8005232:	0052      	lsls	r2, r2, #1
 8005234:	e787      	b.n	8005146 <_dtoa_r+0x256>
 8005236:	07f1      	lsls	r1, r6, #31
 8005238:	d508      	bpl.n	800524c <_dtoa_r+0x35c>
 800523a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800523e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005242:	f7fb f953 	bl	80004ec <__aeabi_dmul>
 8005246:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800524a:	3501      	adds	r5, #1
 800524c:	1076      	asrs	r6, r6, #1
 800524e:	3708      	adds	r7, #8
 8005250:	2e00      	cmp	r6, #0
 8005252:	d1f0      	bne.n	8005236 <_dtoa_r+0x346>
 8005254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525c:	f7fb fa70 	bl	8000740 <__aeabi_ddiv>
 8005260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005264:	e01b      	b.n	800529e <_dtoa_r+0x3ae>
 8005266:	2502      	movs	r5, #2
 8005268:	e7a0      	b.n	80051ac <_dtoa_r+0x2bc>
 800526a:	f000 80a4 	beq.w	80053b6 <_dtoa_r+0x4c6>
 800526e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005272:	f1ca 0600 	rsb	r6, sl, #0
 8005276:	4ba0      	ldr	r3, [pc, #640]	; (80054f8 <_dtoa_r+0x608>)
 8005278:	f006 020f 	and.w	r2, r6, #15
 800527c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb f932 	bl	80004ec <__aeabi_dmul>
 8005288:	2502      	movs	r5, #2
 800528a:	2300      	movs	r3, #0
 800528c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005290:	4f9a      	ldr	r7, [pc, #616]	; (80054fc <_dtoa_r+0x60c>)
 8005292:	1136      	asrs	r6, r6, #4
 8005294:	2e00      	cmp	r6, #0
 8005296:	f040 8083 	bne.w	80053a0 <_dtoa_r+0x4b0>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e0      	bne.n	8005260 <_dtoa_r+0x370>
 800529e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 808a 	beq.w	80053ba <_dtoa_r+0x4ca>
 80052a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80052ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052b2:	2200      	movs	r2, #0
 80052b4:	4b92      	ldr	r3, [pc, #584]	; (8005500 <_dtoa_r+0x610>)
 80052b6:	f7fb fb8b 	bl	80009d0 <__aeabi_dcmplt>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d07d      	beq.n	80053ba <_dtoa_r+0x4ca>
 80052be:	f1b8 0f00 	cmp.w	r8, #0
 80052c2:	d07a      	beq.n	80053ba <_dtoa_r+0x4ca>
 80052c4:	9b04      	ldr	r3, [sp, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dd36      	ble.n	8005338 <_dtoa_r+0x448>
 80052ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052ce:	2200      	movs	r2, #0
 80052d0:	4b8c      	ldr	r3, [pc, #560]	; (8005504 <_dtoa_r+0x614>)
 80052d2:	f7fb f90b 	bl	80004ec <__aeabi_dmul>
 80052d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052da:	9e04      	ldr	r6, [sp, #16]
 80052dc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80052e0:	3501      	adds	r5, #1
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7fb f898 	bl	8000418 <__aeabi_i2d>
 80052e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ec:	f7fb f8fe 	bl	80004ec <__aeabi_dmul>
 80052f0:	2200      	movs	r2, #0
 80052f2:	4b85      	ldr	r3, [pc, #532]	; (8005508 <_dtoa_r+0x618>)
 80052f4:	f7fa ff44 	bl	8000180 <__adddf3>
 80052f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80052fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005300:	950b      	str	r5, [sp, #44]	; 0x2c
 8005302:	2e00      	cmp	r6, #0
 8005304:	d15c      	bne.n	80053c0 <_dtoa_r+0x4d0>
 8005306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	4b7f      	ldr	r3, [pc, #508]	; (800550c <_dtoa_r+0x61c>)
 800530e:	f7fa ff35 	bl	800017c <__aeabi_dsub>
 8005312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005314:	462b      	mov	r3, r5
 8005316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800531a:	f7fb fb77 	bl	8000a0c <__aeabi_dcmpgt>
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 8281 	bne.w	8005826 <_dtoa_r+0x936>
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800532a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800532e:	f7fb fb4f 	bl	80009d0 <__aeabi_dcmplt>
 8005332:	2800      	cmp	r0, #0
 8005334:	f040 8275 	bne.w	8005822 <_dtoa_r+0x932>
 8005338:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800533c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005342:	2b00      	cmp	r3, #0
 8005344:	f2c0 814b 	blt.w	80055de <_dtoa_r+0x6ee>
 8005348:	f1ba 0f0e 	cmp.w	sl, #14
 800534c:	f300 8147 	bgt.w	80055de <_dtoa_r+0x6ee>
 8005350:	4b69      	ldr	r3, [pc, #420]	; (80054f8 <_dtoa_r+0x608>)
 8005352:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800535e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005360:	2b00      	cmp	r3, #0
 8005362:	f280 80d7 	bge.w	8005514 <_dtoa_r+0x624>
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	f300 80d3 	bgt.w	8005514 <_dtoa_r+0x624>
 800536e:	f040 8257 	bne.w	8005820 <_dtoa_r+0x930>
 8005372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005376:	2200      	movs	r2, #0
 8005378:	4b64      	ldr	r3, [pc, #400]	; (800550c <_dtoa_r+0x61c>)
 800537a:	f7fb f8b7 	bl	80004ec <__aeabi_dmul>
 800537e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005382:	f7fb fb39 	bl	80009f8 <__aeabi_dcmpge>
 8005386:	4646      	mov	r6, r8
 8005388:	4647      	mov	r7, r8
 800538a:	2800      	cmp	r0, #0
 800538c:	f040 822d 	bne.w	80057ea <_dtoa_r+0x8fa>
 8005390:	9b06      	ldr	r3, [sp, #24]
 8005392:	9a06      	ldr	r2, [sp, #24]
 8005394:	1c5d      	adds	r5, r3, #1
 8005396:	2331      	movs	r3, #49	; 0x31
 8005398:	f10a 0a01 	add.w	sl, sl, #1
 800539c:	7013      	strb	r3, [r2, #0]
 800539e:	e228      	b.n	80057f2 <_dtoa_r+0x902>
 80053a0:	07f2      	lsls	r2, r6, #31
 80053a2:	d505      	bpl.n	80053b0 <_dtoa_r+0x4c0>
 80053a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a8:	f7fb f8a0 	bl	80004ec <__aeabi_dmul>
 80053ac:	2301      	movs	r3, #1
 80053ae:	3501      	adds	r5, #1
 80053b0:	1076      	asrs	r6, r6, #1
 80053b2:	3708      	adds	r7, #8
 80053b4:	e76e      	b.n	8005294 <_dtoa_r+0x3a4>
 80053b6:	2502      	movs	r5, #2
 80053b8:	e771      	b.n	800529e <_dtoa_r+0x3ae>
 80053ba:	4657      	mov	r7, sl
 80053bc:	4646      	mov	r6, r8
 80053be:	e790      	b.n	80052e2 <_dtoa_r+0x3f2>
 80053c0:	4b4d      	ldr	r3, [pc, #308]	; (80054f8 <_dtoa_r+0x608>)
 80053c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80053ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d048      	beq.n	8005462 <_dtoa_r+0x572>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	2000      	movs	r0, #0
 80053d6:	494e      	ldr	r1, [pc, #312]	; (8005510 <_dtoa_r+0x620>)
 80053d8:	f7fb f9b2 	bl	8000740 <__aeabi_ddiv>
 80053dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053e0:	f7fa fecc 	bl	800017c <__aeabi_dsub>
 80053e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80053e8:	9d06      	ldr	r5, [sp, #24]
 80053ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ee:	f7fb fb2d 	bl	8000a4c <__aeabi_d2iz>
 80053f2:	9011      	str	r0, [sp, #68]	; 0x44
 80053f4:	f7fb f810 	bl	8000418 <__aeabi_i2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005400:	f7fa febc 	bl	800017c <__aeabi_dsub>
 8005404:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800540a:	3330      	adds	r3, #48	; 0x30
 800540c:	f805 3b01 	strb.w	r3, [r5], #1
 8005410:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005414:	f7fb fadc 	bl	80009d0 <__aeabi_dcmplt>
 8005418:	2800      	cmp	r0, #0
 800541a:	d163      	bne.n	80054e4 <_dtoa_r+0x5f4>
 800541c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005420:	2000      	movs	r0, #0
 8005422:	4937      	ldr	r1, [pc, #220]	; (8005500 <_dtoa_r+0x610>)
 8005424:	f7fa feaa 	bl	800017c <__aeabi_dsub>
 8005428:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800542c:	f7fb fad0 	bl	80009d0 <__aeabi_dcmplt>
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 80b5 	bne.w	80055a0 <_dtoa_r+0x6b0>
 8005436:	9b06      	ldr	r3, [sp, #24]
 8005438:	1aeb      	subs	r3, r5, r3
 800543a:	429e      	cmp	r6, r3
 800543c:	f77f af7c 	ble.w	8005338 <_dtoa_r+0x448>
 8005440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005444:	2200      	movs	r2, #0
 8005446:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <_dtoa_r+0x614>)
 8005448:	f7fb f850 	bl	80004ec <__aeabi_dmul>
 800544c:	2200      	movs	r2, #0
 800544e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <_dtoa_r+0x614>)
 8005458:	f7fb f848 	bl	80004ec <__aeabi_dmul>
 800545c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005460:	e7c3      	b.n	80053ea <_dtoa_r+0x4fa>
 8005462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005466:	f7fb f841 	bl	80004ec <__aeabi_dmul>
 800546a:	9b06      	ldr	r3, [sp, #24]
 800546c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005470:	199d      	adds	r5, r3, r6
 8005472:	461e      	mov	r6, r3
 8005474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005478:	f7fb fae8 	bl	8000a4c <__aeabi_d2iz>
 800547c:	9011      	str	r0, [sp, #68]	; 0x44
 800547e:	f7fa ffcb 	bl	8000418 <__aeabi_i2d>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800548a:	f7fa fe77 	bl	800017c <__aeabi_dsub>
 800548e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005494:	3330      	adds	r3, #48	; 0x30
 8005496:	f806 3b01 	strb.w	r3, [r6], #1
 800549a:	42ae      	cmp	r6, r5
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	d124      	bne.n	80054ec <_dtoa_r+0x5fc>
 80054a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <_dtoa_r+0x620>)
 80054a8:	f7fa fe6a 	bl	8000180 <__adddf3>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054b4:	f7fb faaa 	bl	8000a0c <__aeabi_dcmpgt>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d171      	bne.n	80055a0 <_dtoa_r+0x6b0>
 80054bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054c0:	2000      	movs	r0, #0
 80054c2:	4913      	ldr	r1, [pc, #76]	; (8005510 <_dtoa_r+0x620>)
 80054c4:	f7fa fe5a 	bl	800017c <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d0:	f7fb fa7e 	bl	80009d0 <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f43f af2f 	beq.w	8005338 <_dtoa_r+0x448>
 80054da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054de:	1e6a      	subs	r2, r5, #1
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d001      	beq.n	80054e8 <_dtoa_r+0x5f8>
 80054e4:	46ba      	mov	sl, r7
 80054e6:	e04a      	b.n	800557e <_dtoa_r+0x68e>
 80054e8:	4615      	mov	r5, r2
 80054ea:	e7f6      	b.n	80054da <_dtoa_r+0x5ea>
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_dtoa_r+0x614>)
 80054ee:	f7fa fffd 	bl	80004ec <__aeabi_dmul>
 80054f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f6:	e7bd      	b.n	8005474 <_dtoa_r+0x584>
 80054f8:	08006678 	.word	0x08006678
 80054fc:	08006650 	.word	0x08006650
 8005500:	3ff00000 	.word	0x3ff00000
 8005504:	40240000 	.word	0x40240000
 8005508:	401c0000 	.word	0x401c0000
 800550c:	40140000 	.word	0x40140000
 8005510:	3fe00000 	.word	0x3fe00000
 8005514:	9d06      	ldr	r5, [sp, #24]
 8005516:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800551a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800551e:	4630      	mov	r0, r6
 8005520:	4639      	mov	r1, r7
 8005522:	f7fb f90d 	bl	8000740 <__aeabi_ddiv>
 8005526:	f7fb fa91 	bl	8000a4c <__aeabi_d2iz>
 800552a:	4681      	mov	r9, r0
 800552c:	f7fa ff74 	bl	8000418 <__aeabi_i2d>
 8005530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005534:	f7fa ffda 	bl	80004ec <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fa fe1c 	bl	800017c <__aeabi_dsub>
 8005544:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005548:	f805 6b01 	strb.w	r6, [r5], #1
 800554c:	9e06      	ldr	r6, [sp, #24]
 800554e:	4602      	mov	r2, r0
 8005550:	1bae      	subs	r6, r5, r6
 8005552:	45b0      	cmp	r8, r6
 8005554:	460b      	mov	r3, r1
 8005556:	d135      	bne.n	80055c4 <_dtoa_r+0x6d4>
 8005558:	f7fa fe12 	bl	8000180 <__adddf3>
 800555c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	f7fb fa52 	bl	8000a0c <__aeabi_dcmpgt>
 8005568:	b9c8      	cbnz	r0, 800559e <_dtoa_r+0x6ae>
 800556a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fb fa23 	bl	80009bc <__aeabi_dcmpeq>
 8005576:	b110      	cbz	r0, 800557e <_dtoa_r+0x68e>
 8005578:	f019 0f01 	tst.w	r9, #1
 800557c:	d10f      	bne.n	800559e <_dtoa_r+0x6ae>
 800557e:	4659      	mov	r1, fp
 8005580:	4620      	mov	r0, r4
 8005582:	f000 facc 	bl	8005b1e <_Bfree>
 8005586:	2300      	movs	r3, #0
 8005588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800558a:	702b      	strb	r3, [r5, #0]
 800558c:	f10a 0301 	add.w	r3, sl, #1
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005594:	2b00      	cmp	r3, #0
 8005596:	f43f acf3 	beq.w	8004f80 <_dtoa_r+0x90>
 800559a:	601d      	str	r5, [r3, #0]
 800559c:	e4f0      	b.n	8004f80 <_dtoa_r+0x90>
 800559e:	4657      	mov	r7, sl
 80055a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055a4:	1e6b      	subs	r3, r5, #1
 80055a6:	2a39      	cmp	r2, #57	; 0x39
 80055a8:	d106      	bne.n	80055b8 <_dtoa_r+0x6c8>
 80055aa:	9a06      	ldr	r2, [sp, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d107      	bne.n	80055c0 <_dtoa_r+0x6d0>
 80055b0:	2330      	movs	r3, #48	; 0x30
 80055b2:	7013      	strb	r3, [r2, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	3701      	adds	r7, #1
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	3201      	adds	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e791      	b.n	80054e4 <_dtoa_r+0x5f4>
 80055c0:	461d      	mov	r5, r3
 80055c2:	e7ed      	b.n	80055a0 <_dtoa_r+0x6b0>
 80055c4:	2200      	movs	r2, #0
 80055c6:	4b99      	ldr	r3, [pc, #612]	; (800582c <_dtoa_r+0x93c>)
 80055c8:	f7fa ff90 	bl	80004ec <__aeabi_dmul>
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4606      	mov	r6, r0
 80055d2:	460f      	mov	r7, r1
 80055d4:	f7fb f9f2 	bl	80009bc <__aeabi_dcmpeq>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d09e      	beq.n	800551a <_dtoa_r+0x62a>
 80055dc:	e7cf      	b.n	800557e <_dtoa_r+0x68e>
 80055de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e0:	2a00      	cmp	r2, #0
 80055e2:	f000 8088 	beq.w	80056f6 <_dtoa_r+0x806>
 80055e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055e8:	2a01      	cmp	r2, #1
 80055ea:	dc6d      	bgt.n	80056c8 <_dtoa_r+0x7d8>
 80055ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d066      	beq.n	80056c0 <_dtoa_r+0x7d0>
 80055f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055f6:	464d      	mov	r5, r9
 80055f8:	9e08      	ldr	r6, [sp, #32]
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	2101      	movs	r1, #1
 80055fe:	441a      	add	r2, r3
 8005600:	4620      	mov	r0, r4
 8005602:	4499      	add	r9, r3
 8005604:	9207      	str	r2, [sp, #28]
 8005606:	f000 fb2a 	bl	8005c5e <__i2b>
 800560a:	4607      	mov	r7, r0
 800560c:	2d00      	cmp	r5, #0
 800560e:	dd0b      	ble.n	8005628 <_dtoa_r+0x738>
 8005610:	9b07      	ldr	r3, [sp, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd08      	ble.n	8005628 <_dtoa_r+0x738>
 8005616:	42ab      	cmp	r3, r5
 8005618:	bfa8      	it	ge
 800561a:	462b      	movge	r3, r5
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	eba9 0903 	sub.w	r9, r9, r3
 8005622:	1aed      	subs	r5, r5, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	9307      	str	r3, [sp, #28]
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	b1eb      	cbz	r3, 8005668 <_dtoa_r+0x778>
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d065      	beq.n	80056fe <_dtoa_r+0x80e>
 8005632:	b18e      	cbz	r6, 8005658 <_dtoa_r+0x768>
 8005634:	4639      	mov	r1, r7
 8005636:	4632      	mov	r2, r6
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fbaf 	bl	8005d9c <__pow5mult>
 800563e:	465a      	mov	r2, fp
 8005640:	4601      	mov	r1, r0
 8005642:	4607      	mov	r7, r0
 8005644:	4620      	mov	r0, r4
 8005646:	f000 fb13 	bl	8005c70 <__multiply>
 800564a:	4659      	mov	r1, fp
 800564c:	900a      	str	r0, [sp, #40]	; 0x28
 800564e:	4620      	mov	r0, r4
 8005650:	f000 fa65 	bl	8005b1e <_Bfree>
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	469b      	mov	fp, r3
 8005658:	9b08      	ldr	r3, [sp, #32]
 800565a:	1b9a      	subs	r2, r3, r6
 800565c:	d004      	beq.n	8005668 <_dtoa_r+0x778>
 800565e:	4659      	mov	r1, fp
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fb9b 	bl	8005d9c <__pow5mult>
 8005666:	4683      	mov	fp, r0
 8005668:	2101      	movs	r1, #1
 800566a:	4620      	mov	r0, r4
 800566c:	f000 faf7 	bl	8005c5e <__i2b>
 8005670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005672:	4606      	mov	r6, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 81c6 	beq.w	8005a06 <_dtoa_r+0xb16>
 800567a:	461a      	mov	r2, r3
 800567c:	4601      	mov	r1, r0
 800567e:	4620      	mov	r0, r4
 8005680:	f000 fb8c 	bl	8005d9c <__pow5mult>
 8005684:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005686:	4606      	mov	r6, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	dc3e      	bgt.n	800570a <_dtoa_r+0x81a>
 800568c:	9b02      	ldr	r3, [sp, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d137      	bne.n	8005702 <_dtoa_r+0x812>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005698:	2b00      	cmp	r3, #0
 800569a:	d134      	bne.n	8005706 <_dtoa_r+0x816>
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a2:	0d1b      	lsrs	r3, r3, #20
 80056a4:	051b      	lsls	r3, r3, #20
 80056a6:	b12b      	cbz	r3, 80056b4 <_dtoa_r+0x7c4>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	f109 0901 	add.w	r9, r9, #1
 80056ae:	3301      	adds	r3, #1
 80056b0:	9307      	str	r3, [sp, #28]
 80056b2:	2301      	movs	r3, #1
 80056b4:	9308      	str	r3, [sp, #32]
 80056b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d128      	bne.n	800570e <_dtoa_r+0x81e>
 80056bc:	2001      	movs	r0, #1
 80056be:	e02e      	b.n	800571e <_dtoa_r+0x82e>
 80056c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056c6:	e796      	b.n	80055f6 <_dtoa_r+0x706>
 80056c8:	9b08      	ldr	r3, [sp, #32]
 80056ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80056ce:	42b3      	cmp	r3, r6
 80056d0:	bfb7      	itett	lt
 80056d2:	9b08      	ldrlt	r3, [sp, #32]
 80056d4:	1b9e      	subge	r6, r3, r6
 80056d6:	1af2      	sublt	r2, r6, r3
 80056d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80056da:	bfbf      	itttt	lt
 80056dc:	9608      	strlt	r6, [sp, #32]
 80056de:	189b      	addlt	r3, r3, r2
 80056e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80056e2:	2600      	movlt	r6, #0
 80056e4:	f1b8 0f00 	cmp.w	r8, #0
 80056e8:	bfb9      	ittee	lt
 80056ea:	eba9 0508 	sublt.w	r5, r9, r8
 80056ee:	2300      	movlt	r3, #0
 80056f0:	464d      	movge	r5, r9
 80056f2:	4643      	movge	r3, r8
 80056f4:	e781      	b.n	80055fa <_dtoa_r+0x70a>
 80056f6:	9e08      	ldr	r6, [sp, #32]
 80056f8:	464d      	mov	r5, r9
 80056fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056fc:	e786      	b.n	800560c <_dtoa_r+0x71c>
 80056fe:	9a08      	ldr	r2, [sp, #32]
 8005700:	e7ad      	b.n	800565e <_dtoa_r+0x76e>
 8005702:	2300      	movs	r3, #0
 8005704:	e7d6      	b.n	80056b4 <_dtoa_r+0x7c4>
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	e7d4      	b.n	80056b4 <_dtoa_r+0x7c4>
 800570a:	2300      	movs	r3, #0
 800570c:	9308      	str	r3, [sp, #32]
 800570e:	6933      	ldr	r3, [r6, #16]
 8005710:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005714:	6918      	ldr	r0, [r3, #16]
 8005716:	f000 fa54 	bl	8005bc2 <__hi0bits>
 800571a:	f1c0 0020 	rsb	r0, r0, #32
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	4418      	add	r0, r3
 8005722:	f010 001f 	ands.w	r0, r0, #31
 8005726:	d047      	beq.n	80057b8 <_dtoa_r+0x8c8>
 8005728:	f1c0 0320 	rsb	r3, r0, #32
 800572c:	2b04      	cmp	r3, #4
 800572e:	dd3b      	ble.n	80057a8 <_dtoa_r+0x8b8>
 8005730:	9b07      	ldr	r3, [sp, #28]
 8005732:	f1c0 001c 	rsb	r0, r0, #28
 8005736:	4481      	add	r9, r0
 8005738:	4405      	add	r5, r0
 800573a:	4403      	add	r3, r0
 800573c:	9307      	str	r3, [sp, #28]
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	dd05      	ble.n	8005750 <_dtoa_r+0x860>
 8005744:	4659      	mov	r1, fp
 8005746:	464a      	mov	r2, r9
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fb75 	bl	8005e38 <__lshift>
 800574e:	4683      	mov	fp, r0
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd05      	ble.n	8005762 <_dtoa_r+0x872>
 8005756:	4631      	mov	r1, r6
 8005758:	461a      	mov	r2, r3
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fb6c 	bl	8005e38 <__lshift>
 8005760:	4606      	mov	r6, r0
 8005762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005764:	b353      	cbz	r3, 80057bc <_dtoa_r+0x8cc>
 8005766:	4631      	mov	r1, r6
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fbb9 	bl	8005ee0 <__mcmp>
 800576e:	2800      	cmp	r0, #0
 8005770:	da24      	bge.n	80057bc <_dtoa_r+0x8cc>
 8005772:	2300      	movs	r3, #0
 8005774:	4659      	mov	r1, fp
 8005776:	220a      	movs	r2, #10
 8005778:	4620      	mov	r0, r4
 800577a:	f000 f9e7 	bl	8005b4c <__multadd>
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005784:	4683      	mov	fp, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8144 	beq.w	8005a14 <_dtoa_r+0xb24>
 800578c:	2300      	movs	r3, #0
 800578e:	4639      	mov	r1, r7
 8005790:	220a      	movs	r2, #10
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f9da 	bl	8005b4c <__multadd>
 8005798:	9b04      	ldr	r3, [sp, #16]
 800579a:	4607      	mov	r7, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	dc4d      	bgt.n	800583c <_dtoa_r+0x94c>
 80057a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	dd4a      	ble.n	800583c <_dtoa_r+0x94c>
 80057a6:	e011      	b.n	80057cc <_dtoa_r+0x8dc>
 80057a8:	d0c9      	beq.n	800573e <_dtoa_r+0x84e>
 80057aa:	9a07      	ldr	r2, [sp, #28]
 80057ac:	331c      	adds	r3, #28
 80057ae:	441a      	add	r2, r3
 80057b0:	4499      	add	r9, r3
 80057b2:	441d      	add	r5, r3
 80057b4:	4613      	mov	r3, r2
 80057b6:	e7c1      	b.n	800573c <_dtoa_r+0x84c>
 80057b8:	4603      	mov	r3, r0
 80057ba:	e7f6      	b.n	80057aa <_dtoa_r+0x8ba>
 80057bc:	f1b8 0f00 	cmp.w	r8, #0
 80057c0:	dc36      	bgt.n	8005830 <_dtoa_r+0x940>
 80057c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	dd33      	ble.n	8005830 <_dtoa_r+0x940>
 80057c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	b963      	cbnz	r3, 80057ea <_dtoa_r+0x8fa>
 80057d0:	4631      	mov	r1, r6
 80057d2:	2205      	movs	r2, #5
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f9b9 	bl	8005b4c <__multadd>
 80057da:	4601      	mov	r1, r0
 80057dc:	4606      	mov	r6, r0
 80057de:	4658      	mov	r0, fp
 80057e0:	f000 fb7e 	bl	8005ee0 <__mcmp>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f73f add3 	bgt.w	8005390 <_dtoa_r+0x4a0>
 80057ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057ec:	9d06      	ldr	r5, [sp, #24]
 80057ee:	ea6f 0a03 	mvn.w	sl, r3
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	4631      	mov	r1, r6
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 f990 	bl	8005b1e <_Bfree>
 80057fe:	2f00      	cmp	r7, #0
 8005800:	f43f aebd 	beq.w	800557e <_dtoa_r+0x68e>
 8005804:	f1b9 0f00 	cmp.w	r9, #0
 8005808:	d005      	beq.n	8005816 <_dtoa_r+0x926>
 800580a:	45b9      	cmp	r9, r7
 800580c:	d003      	beq.n	8005816 <_dtoa_r+0x926>
 800580e:	4649      	mov	r1, r9
 8005810:	4620      	mov	r0, r4
 8005812:	f000 f984 	bl	8005b1e <_Bfree>
 8005816:	4639      	mov	r1, r7
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f980 	bl	8005b1e <_Bfree>
 800581e:	e6ae      	b.n	800557e <_dtoa_r+0x68e>
 8005820:	2600      	movs	r6, #0
 8005822:	4637      	mov	r7, r6
 8005824:	e7e1      	b.n	80057ea <_dtoa_r+0x8fa>
 8005826:	46ba      	mov	sl, r7
 8005828:	4637      	mov	r7, r6
 800582a:	e5b1      	b.n	8005390 <_dtoa_r+0x4a0>
 800582c:	40240000 	.word	0x40240000
 8005830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005832:	f8cd 8010 	str.w	r8, [sp, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80f3 	beq.w	8005a22 <_dtoa_r+0xb32>
 800583c:	2d00      	cmp	r5, #0
 800583e:	dd05      	ble.n	800584c <_dtoa_r+0x95c>
 8005840:	4639      	mov	r1, r7
 8005842:	462a      	mov	r2, r5
 8005844:	4620      	mov	r0, r4
 8005846:	f000 faf7 	bl	8005e38 <__lshift>
 800584a:	4607      	mov	r7, r0
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04c      	beq.n	80058ec <_dtoa_r+0x9fc>
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4620      	mov	r0, r4
 8005856:	f000 f92e 	bl	8005ab6 <_Balloc>
 800585a:	4605      	mov	r5, r0
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	f107 010c 	add.w	r1, r7, #12
 8005862:	3202      	adds	r2, #2
 8005864:	0092      	lsls	r2, r2, #2
 8005866:	300c      	adds	r0, #12
 8005868:	f000 f91a 	bl	8005aa0 <memcpy>
 800586c:	2201      	movs	r2, #1
 800586e:	4629      	mov	r1, r5
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fae1 	bl	8005e38 <__lshift>
 8005876:	46b9      	mov	r9, r7
 8005878:	4607      	mov	r7, r0
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	9307      	str	r3, [sp, #28]
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	9308      	str	r3, [sp, #32]
 8005886:	4631      	mov	r1, r6
 8005888:	4658      	mov	r0, fp
 800588a:	f7ff faa1 	bl	8004dd0 <quorem>
 800588e:	4649      	mov	r1, r9
 8005890:	4605      	mov	r5, r0
 8005892:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005896:	4658      	mov	r0, fp
 8005898:	f000 fb22 	bl	8005ee0 <__mcmp>
 800589c:	463a      	mov	r2, r7
 800589e:	9002      	str	r0, [sp, #8]
 80058a0:	4631      	mov	r1, r6
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fb36 	bl	8005f14 <__mdiff>
 80058a8:	68c3      	ldr	r3, [r0, #12]
 80058aa:	4602      	mov	r2, r0
 80058ac:	bb03      	cbnz	r3, 80058f0 <_dtoa_r+0xa00>
 80058ae:	4601      	mov	r1, r0
 80058b0:	9009      	str	r0, [sp, #36]	; 0x24
 80058b2:	4658      	mov	r0, fp
 80058b4:	f000 fb14 	bl	8005ee0 <__mcmp>
 80058b8:	4603      	mov	r3, r0
 80058ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058bc:	4611      	mov	r1, r2
 80058be:	4620      	mov	r0, r4
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	f000 f92c 	bl	8005b1e <_Bfree>
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	b9a3      	cbnz	r3, 80058f4 <_dtoa_r+0xa04>
 80058ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058cc:	b992      	cbnz	r2, 80058f4 <_dtoa_r+0xa04>
 80058ce:	9a08      	ldr	r2, [sp, #32]
 80058d0:	b982      	cbnz	r2, 80058f4 <_dtoa_r+0xa04>
 80058d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058d6:	d029      	beq.n	800592c <_dtoa_r+0xa3c>
 80058d8:	9b02      	ldr	r3, [sp, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dd01      	ble.n	80058e2 <_dtoa_r+0x9f2>
 80058de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80058e2:	9b07      	ldr	r3, [sp, #28]
 80058e4:	1c5d      	adds	r5, r3, #1
 80058e6:	f883 8000 	strb.w	r8, [r3]
 80058ea:	e784      	b.n	80057f6 <_dtoa_r+0x906>
 80058ec:	4638      	mov	r0, r7
 80058ee:	e7c2      	b.n	8005876 <_dtoa_r+0x986>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7e3      	b.n	80058bc <_dtoa_r+0x9cc>
 80058f4:	9a02      	ldr	r2, [sp, #8]
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	db04      	blt.n	8005904 <_dtoa_r+0xa14>
 80058fa:	d123      	bne.n	8005944 <_dtoa_r+0xa54>
 80058fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058fe:	bb0a      	cbnz	r2, 8005944 <_dtoa_r+0xa54>
 8005900:	9a08      	ldr	r2, [sp, #32]
 8005902:	b9fa      	cbnz	r2, 8005944 <_dtoa_r+0xa54>
 8005904:	2b00      	cmp	r3, #0
 8005906:	ddec      	ble.n	80058e2 <_dtoa_r+0x9f2>
 8005908:	4659      	mov	r1, fp
 800590a:	2201      	movs	r2, #1
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fa93 	bl	8005e38 <__lshift>
 8005912:	4631      	mov	r1, r6
 8005914:	4683      	mov	fp, r0
 8005916:	f000 fae3 	bl	8005ee0 <__mcmp>
 800591a:	2800      	cmp	r0, #0
 800591c:	dc03      	bgt.n	8005926 <_dtoa_r+0xa36>
 800591e:	d1e0      	bne.n	80058e2 <_dtoa_r+0x9f2>
 8005920:	f018 0f01 	tst.w	r8, #1
 8005924:	d0dd      	beq.n	80058e2 <_dtoa_r+0x9f2>
 8005926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800592a:	d1d8      	bne.n	80058de <_dtoa_r+0x9ee>
 800592c:	9b07      	ldr	r3, [sp, #28]
 800592e:	9a07      	ldr	r2, [sp, #28]
 8005930:	1c5d      	adds	r5, r3, #1
 8005932:	2339      	movs	r3, #57	; 0x39
 8005934:	7013      	strb	r3, [r2, #0]
 8005936:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800593a:	1e6a      	subs	r2, r5, #1
 800593c:	2b39      	cmp	r3, #57	; 0x39
 800593e:	d04d      	beq.n	80059dc <_dtoa_r+0xaec>
 8005940:	3301      	adds	r3, #1
 8005942:	e052      	b.n	80059ea <_dtoa_r+0xafa>
 8005944:	9a07      	ldr	r2, [sp, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f102 0501 	add.w	r5, r2, #1
 800594c:	dd06      	ble.n	800595c <_dtoa_r+0xa6c>
 800594e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005952:	d0eb      	beq.n	800592c <_dtoa_r+0xa3c>
 8005954:	f108 0801 	add.w	r8, r8, #1
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	e7c4      	b.n	80058e6 <_dtoa_r+0x9f6>
 800595c:	9b06      	ldr	r3, [sp, #24]
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	1aeb      	subs	r3, r5, r3
 8005962:	4293      	cmp	r3, r2
 8005964:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005968:	d021      	beq.n	80059ae <_dtoa_r+0xabe>
 800596a:	4659      	mov	r1, fp
 800596c:	2300      	movs	r3, #0
 800596e:	220a      	movs	r2, #10
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f8eb 	bl	8005b4c <__multadd>
 8005976:	45b9      	cmp	r9, r7
 8005978:	4683      	mov	fp, r0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 020a 	mov.w	r2, #10
 8005982:	4649      	mov	r1, r9
 8005984:	4620      	mov	r0, r4
 8005986:	d105      	bne.n	8005994 <_dtoa_r+0xaa4>
 8005988:	f000 f8e0 	bl	8005b4c <__multadd>
 800598c:	4681      	mov	r9, r0
 800598e:	4607      	mov	r7, r0
 8005990:	9507      	str	r5, [sp, #28]
 8005992:	e778      	b.n	8005886 <_dtoa_r+0x996>
 8005994:	f000 f8da 	bl	8005b4c <__multadd>
 8005998:	4639      	mov	r1, r7
 800599a:	4681      	mov	r9, r0
 800599c:	2300      	movs	r3, #0
 800599e:	220a      	movs	r2, #10
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f8d3 	bl	8005b4c <__multadd>
 80059a6:	4607      	mov	r7, r0
 80059a8:	e7f2      	b.n	8005990 <_dtoa_r+0xaa0>
 80059aa:	f04f 0900 	mov.w	r9, #0
 80059ae:	4659      	mov	r1, fp
 80059b0:	2201      	movs	r2, #1
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fa40 	bl	8005e38 <__lshift>
 80059b8:	4631      	mov	r1, r6
 80059ba:	4683      	mov	fp, r0
 80059bc:	f000 fa90 	bl	8005ee0 <__mcmp>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	dcb8      	bgt.n	8005936 <_dtoa_r+0xa46>
 80059c4:	d102      	bne.n	80059cc <_dtoa_r+0xadc>
 80059c6:	f018 0f01 	tst.w	r8, #1
 80059ca:	d1b4      	bne.n	8005936 <_dtoa_r+0xa46>
 80059cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059d0:	1e6a      	subs	r2, r5, #1
 80059d2:	2b30      	cmp	r3, #48	; 0x30
 80059d4:	f47f af0f 	bne.w	80057f6 <_dtoa_r+0x906>
 80059d8:	4615      	mov	r5, r2
 80059da:	e7f7      	b.n	80059cc <_dtoa_r+0xadc>
 80059dc:	9b06      	ldr	r3, [sp, #24]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d105      	bne.n	80059ee <_dtoa_r+0xafe>
 80059e2:	2331      	movs	r3, #49	; 0x31
 80059e4:	9a06      	ldr	r2, [sp, #24]
 80059e6:	f10a 0a01 	add.w	sl, sl, #1
 80059ea:	7013      	strb	r3, [r2, #0]
 80059ec:	e703      	b.n	80057f6 <_dtoa_r+0x906>
 80059ee:	4615      	mov	r5, r2
 80059f0:	e7a1      	b.n	8005936 <_dtoa_r+0xa46>
 80059f2:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <_dtoa_r+0xb60>)
 80059f4:	f7ff bae1 	b.w	8004fba <_dtoa_r+0xca>
 80059f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f47f aabb 	bne.w	8004f76 <_dtoa_r+0x86>
 8005a00:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <_dtoa_r+0xb64>)
 8005a02:	f7ff bada 	b.w	8004fba <_dtoa_r+0xca>
 8005a06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f77f ae3f 	ble.w	800568c <_dtoa_r+0x79c>
 8005a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a10:	9308      	str	r3, [sp, #32]
 8005a12:	e653      	b.n	80056bc <_dtoa_r+0x7cc>
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dc03      	bgt.n	8005a22 <_dtoa_r+0xb32>
 8005a1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	f73f aed5 	bgt.w	80057cc <_dtoa_r+0x8dc>
 8005a22:	9d06      	ldr	r5, [sp, #24]
 8005a24:	4631      	mov	r1, r6
 8005a26:	4658      	mov	r0, fp
 8005a28:	f7ff f9d2 	bl	8004dd0 <quorem>
 8005a2c:	9b06      	ldr	r3, [sp, #24]
 8005a2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a32:	f805 8b01 	strb.w	r8, [r5], #1
 8005a36:	9a04      	ldr	r2, [sp, #16]
 8005a38:	1aeb      	subs	r3, r5, r3
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	ddb5      	ble.n	80059aa <_dtoa_r+0xaba>
 8005a3e:	4659      	mov	r1, fp
 8005a40:	2300      	movs	r3, #0
 8005a42:	220a      	movs	r2, #10
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 f881 	bl	8005b4c <__multadd>
 8005a4a:	4683      	mov	fp, r0
 8005a4c:	e7ea      	b.n	8005a24 <_dtoa_r+0xb34>
 8005a4e:	bf00      	nop
 8005a50:	0800661c 	.word	0x0800661c
 8005a54:	08006640 	.word	0x08006640

08005a58 <_localeconv_r>:
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <_localeconv_r+0x14>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a18      	ldr	r0, [r3, #32]
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <_localeconv_r+0x18>)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	bf08      	it	eq
 8005a64:	4618      	moveq	r0, r3
 8005a66:	30f0      	adds	r0, #240	; 0xf0
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	2000000c 	.word	0x2000000c
 8005a70:	20000070 	.word	0x20000070

08005a74 <malloc>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <malloc+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f000 bb53 	b.w	8006124 <_malloc_r>
 8005a7e:	bf00      	nop
 8005a80:	2000000c 	.word	0x2000000c

08005a84 <memchr>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	b2c9      	uxtb	r1, r1
 8005a88:	4402      	add	r2, r0
 8005a8a:	4290      	cmp	r0, r2
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	d101      	bne.n	8005a94 <memchr+0x10>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e003      	b.n	8005a9c <memchr+0x18>
 8005a94:	781c      	ldrb	r4, [r3, #0]
 8005a96:	3001      	adds	r0, #1
 8005a98:	428c      	cmp	r4, r1
 8005a9a:	d1f6      	bne.n	8005a8a <memchr+0x6>
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memcpy>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	1e43      	subs	r3, r0, #1
 8005aa4:	440a      	add	r2, r1
 8005aa6:	4291      	cmp	r1, r2
 8005aa8:	d100      	bne.n	8005aac <memcpy+0xc>
 8005aaa:	bd10      	pop	{r4, pc}
 8005aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab4:	e7f7      	b.n	8005aa6 <memcpy+0x6>

08005ab6 <_Balloc>:
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005aba:	4604      	mov	r4, r0
 8005abc:	460e      	mov	r6, r1
 8005abe:	b93d      	cbnz	r5, 8005ad0 <_Balloc+0x1a>
 8005ac0:	2010      	movs	r0, #16
 8005ac2:	f7ff ffd7 	bl	8005a74 <malloc>
 8005ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005acc:	6005      	str	r5, [r0, #0]
 8005ace:	60c5      	str	r5, [r0, #12]
 8005ad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ad2:	68eb      	ldr	r3, [r5, #12]
 8005ad4:	b183      	cbz	r3, 8005af8 <_Balloc+0x42>
 8005ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ade:	b9b8      	cbnz	r0, 8005b10 <_Balloc+0x5a>
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f506 	lsl.w	r5, r1, r6
 8005ae6:	1d6a      	adds	r2, r5, #5
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 fabf 	bl	800606e <_calloc_r>
 8005af0:	b160      	cbz	r0, 8005b0c <_Balloc+0x56>
 8005af2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005af6:	e00e      	b.n	8005b16 <_Balloc+0x60>
 8005af8:	2221      	movs	r2, #33	; 0x21
 8005afa:	2104      	movs	r1, #4
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fab6 	bl	800606e <_calloc_r>
 8005b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b04:	60e8      	str	r0, [r5, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <_Balloc+0x20>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	6802      	ldr	r2, [r0, #0]
 8005b12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b16:	2300      	movs	r3, #0
 8005b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b1c:	e7f7      	b.n	8005b0e <_Balloc+0x58>

08005b1e <_Bfree>:
 8005b1e:	b570      	push	{r4, r5, r6, lr}
 8005b20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b22:	4606      	mov	r6, r0
 8005b24:	460d      	mov	r5, r1
 8005b26:	b93c      	cbnz	r4, 8005b38 <_Bfree+0x1a>
 8005b28:	2010      	movs	r0, #16
 8005b2a:	f7ff ffa3 	bl	8005a74 <malloc>
 8005b2e:	6270      	str	r0, [r6, #36]	; 0x24
 8005b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b34:	6004      	str	r4, [r0, #0]
 8005b36:	60c4      	str	r4, [r0, #12]
 8005b38:	b13d      	cbz	r5, 8005b4a <_Bfree+0x2c>
 8005b3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b3c:	686a      	ldr	r2, [r5, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b44:	6029      	str	r1, [r5, #0]
 8005b46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}

08005b4c <__multadd>:
 8005b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	461f      	mov	r7, r3
 8005b52:	4606      	mov	r6, r0
 8005b54:	460c      	mov	r4, r1
 8005b56:	2300      	movs	r3, #0
 8005b58:	690d      	ldr	r5, [r1, #16]
 8005b5a:	f101 0c14 	add.w	ip, r1, #20
 8005b5e:	f8dc 0000 	ldr.w	r0, [ip]
 8005b62:	3301      	adds	r3, #1
 8005b64:	b281      	uxth	r1, r0
 8005b66:	fb02 7101 	mla	r1, r2, r1, r7
 8005b6a:	0c00      	lsrs	r0, r0, #16
 8005b6c:	0c0f      	lsrs	r7, r1, #16
 8005b6e:	fb02 7000 	mla	r0, r2, r0, r7
 8005b72:	b289      	uxth	r1, r1
 8005b74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005b78:	429d      	cmp	r5, r3
 8005b7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005b7e:	f84c 1b04 	str.w	r1, [ip], #4
 8005b82:	dcec      	bgt.n	8005b5e <__multadd+0x12>
 8005b84:	b1d7      	cbz	r7, 8005bbc <__multadd+0x70>
 8005b86:	68a3      	ldr	r3, [r4, #8]
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	dc12      	bgt.n	8005bb2 <__multadd+0x66>
 8005b8c:	6861      	ldr	r1, [r4, #4]
 8005b8e:	4630      	mov	r0, r6
 8005b90:	3101      	adds	r1, #1
 8005b92:	f7ff ff90 	bl	8005ab6 <_Balloc>
 8005b96:	4680      	mov	r8, r0
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	f104 010c 	add.w	r1, r4, #12
 8005b9e:	3202      	adds	r2, #2
 8005ba0:	0092      	lsls	r2, r2, #2
 8005ba2:	300c      	adds	r0, #12
 8005ba4:	f7ff ff7c 	bl	8005aa0 <memcpy>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7ff ffb7 	bl	8005b1e <_Bfree>
 8005bb0:	4644      	mov	r4, r8
 8005bb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bb6:	3501      	adds	r5, #1
 8005bb8:	615f      	str	r7, [r3, #20]
 8005bba:	6125      	str	r5, [r4, #16]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bc2 <__hi0bits>:
 8005bc2:	0c02      	lsrs	r2, r0, #16
 8005bc4:	0412      	lsls	r2, r2, #16
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b9b2      	cbnz	r2, 8005bf8 <__hi0bits+0x36>
 8005bca:	0403      	lsls	r3, r0, #16
 8005bcc:	2010      	movs	r0, #16
 8005bce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bd2:	bf04      	itt	eq
 8005bd4:	021b      	lsleq	r3, r3, #8
 8005bd6:	3008      	addeq	r0, #8
 8005bd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bdc:	bf04      	itt	eq
 8005bde:	011b      	lsleq	r3, r3, #4
 8005be0:	3004      	addeq	r0, #4
 8005be2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005be6:	bf04      	itt	eq
 8005be8:	009b      	lsleq	r3, r3, #2
 8005bea:	3002      	addeq	r0, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db06      	blt.n	8005bfe <__hi0bits+0x3c>
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	d503      	bpl.n	8005bfc <__hi0bits+0x3a>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	4770      	bx	lr
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e7e8      	b.n	8005bce <__hi0bits+0xc>
 8005bfc:	2020      	movs	r0, #32
 8005bfe:	4770      	bx	lr

08005c00 <__lo0bits>:
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	4601      	mov	r1, r0
 8005c04:	f013 0207 	ands.w	r2, r3, #7
 8005c08:	d00b      	beq.n	8005c22 <__lo0bits+0x22>
 8005c0a:	07da      	lsls	r2, r3, #31
 8005c0c:	d423      	bmi.n	8005c56 <__lo0bits+0x56>
 8005c0e:	0798      	lsls	r0, r3, #30
 8005c10:	bf49      	itett	mi
 8005c12:	085b      	lsrmi	r3, r3, #1
 8005c14:	089b      	lsrpl	r3, r3, #2
 8005c16:	2001      	movmi	r0, #1
 8005c18:	600b      	strmi	r3, [r1, #0]
 8005c1a:	bf5c      	itt	pl
 8005c1c:	600b      	strpl	r3, [r1, #0]
 8005c1e:	2002      	movpl	r0, #2
 8005c20:	4770      	bx	lr
 8005c22:	b298      	uxth	r0, r3
 8005c24:	b9a8      	cbnz	r0, 8005c52 <__lo0bits+0x52>
 8005c26:	2010      	movs	r0, #16
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c2e:	bf04      	itt	eq
 8005c30:	0a1b      	lsreq	r3, r3, #8
 8005c32:	3008      	addeq	r0, #8
 8005c34:	071a      	lsls	r2, r3, #28
 8005c36:	bf04      	itt	eq
 8005c38:	091b      	lsreq	r3, r3, #4
 8005c3a:	3004      	addeq	r0, #4
 8005c3c:	079a      	lsls	r2, r3, #30
 8005c3e:	bf04      	itt	eq
 8005c40:	089b      	lsreq	r3, r3, #2
 8005c42:	3002      	addeq	r0, #2
 8005c44:	07da      	lsls	r2, r3, #31
 8005c46:	d402      	bmi.n	8005c4e <__lo0bits+0x4e>
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	d006      	beq.n	8005c5a <__lo0bits+0x5a>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	600b      	str	r3, [r1, #0]
 8005c50:	4770      	bx	lr
 8005c52:	4610      	mov	r0, r2
 8005c54:	e7e9      	b.n	8005c2a <__lo0bits+0x2a>
 8005c56:	2000      	movs	r0, #0
 8005c58:	4770      	bx	lr
 8005c5a:	2020      	movs	r0, #32
 8005c5c:	4770      	bx	lr

08005c5e <__i2b>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	2101      	movs	r1, #1
 8005c64:	f7ff ff27 	bl	8005ab6 <_Balloc>
 8005c68:	2201      	movs	r2, #1
 8005c6a:	6144      	str	r4, [r0, #20]
 8005c6c:	6102      	str	r2, [r0, #16]
 8005c6e:	bd10      	pop	{r4, pc}

08005c70 <__multiply>:
 8005c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	4614      	mov	r4, r2
 8005c76:	690a      	ldr	r2, [r1, #16]
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	bfbe      	ittt	lt
 8005c80:	460b      	movlt	r3, r1
 8005c82:	46a0      	movlt	r8, r4
 8005c84:	461c      	movlt	r4, r3
 8005c86:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c92:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c96:	eb07 0609 	add.w	r6, r7, r9
 8005c9a:	42b3      	cmp	r3, r6
 8005c9c:	bfb8      	it	lt
 8005c9e:	3101      	addlt	r1, #1
 8005ca0:	f7ff ff09 	bl	8005ab6 <_Balloc>
 8005ca4:	f100 0514 	add.w	r5, r0, #20
 8005ca8:	462b      	mov	r3, r5
 8005caa:	2200      	movs	r2, #0
 8005cac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cb0:	4573      	cmp	r3, lr
 8005cb2:	d316      	bcc.n	8005ce2 <__multiply+0x72>
 8005cb4:	f104 0214 	add.w	r2, r4, #20
 8005cb8:	f108 0114 	add.w	r1, r8, #20
 8005cbc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005cc0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	9201      	str	r2, [sp, #4]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d80c      	bhi.n	8005ce8 <__multiply+0x78>
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	dd03      	ble.n	8005cda <__multiply+0x6a>
 8005cd2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d05d      	beq.n	8005d96 <__multiply+0x126>
 8005cda:	6106      	str	r6, [r0, #16]
 8005cdc:	b003      	add	sp, #12
 8005cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce2:	f843 2b04 	str.w	r2, [r3], #4
 8005ce6:	e7e3      	b.n	8005cb0 <__multiply+0x40>
 8005ce8:	f8b2 b000 	ldrh.w	fp, [r2]
 8005cec:	f1bb 0f00 	cmp.w	fp, #0
 8005cf0:	d023      	beq.n	8005d3a <__multiply+0xca>
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	46ac      	mov	ip, r5
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cfe:	f8dc a000 	ldr.w	sl, [ip]
 8005d02:	b2a3      	uxth	r3, r4
 8005d04:	fa1f fa8a 	uxth.w	sl, sl
 8005d08:	fb0b a303 	mla	r3, fp, r3, sl
 8005d0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d10:	f8dc 4000 	ldr.w	r4, [ip]
 8005d14:	4443      	add	r3, r8
 8005d16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d1a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d1e:	46e2      	mov	sl, ip
 8005d20:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d2a:	454f      	cmp	r7, r9
 8005d2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d30:	f84a 3b04 	str.w	r3, [sl], #4
 8005d34:	d82b      	bhi.n	8005d8e <__multiply+0x11e>
 8005d36:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	3204      	adds	r2, #4
 8005d3e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d42:	f1ba 0f00 	cmp.w	sl, #0
 8005d46:	d020      	beq.n	8005d8a <__multiply+0x11a>
 8005d48:	4689      	mov	r9, r1
 8005d4a:	46a8      	mov	r8, r5
 8005d4c:	f04f 0b00 	mov.w	fp, #0
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d56:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d60:	46c4      	mov	ip, r8
 8005d62:	445c      	add	r4, fp
 8005d64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d68:	f84c 3b04 	str.w	r3, [ip], #4
 8005d6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d70:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	fb0a b303 	mla	r3, sl, r3, fp
 8005d7a:	454f      	cmp	r7, r9
 8005d7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d80:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005d84:	d805      	bhi.n	8005d92 <__multiply+0x122>
 8005d86:	f8c8 3004 	str.w	r3, [r8, #4]
 8005d8a:	3504      	adds	r5, #4
 8005d8c:	e79b      	b.n	8005cc6 <__multiply+0x56>
 8005d8e:	46d4      	mov	ip, sl
 8005d90:	e7b3      	b.n	8005cfa <__multiply+0x8a>
 8005d92:	46e0      	mov	r8, ip
 8005d94:	e7dd      	b.n	8005d52 <__multiply+0xe2>
 8005d96:	3e01      	subs	r6, #1
 8005d98:	e799      	b.n	8005cce <__multiply+0x5e>
	...

08005d9c <__pow5mult>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4615      	mov	r5, r2
 8005da2:	f012 0203 	ands.w	r2, r2, #3
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	d007      	beq.n	8005dbc <__pow5mult+0x20>
 8005dac:	4c21      	ldr	r4, [pc, #132]	; (8005e34 <__pow5mult+0x98>)
 8005dae:	3a01      	subs	r2, #1
 8005db0:	2300      	movs	r3, #0
 8005db2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005db6:	f7ff fec9 	bl	8005b4c <__multadd>
 8005dba:	4607      	mov	r7, r0
 8005dbc:	10ad      	asrs	r5, r5, #2
 8005dbe:	d035      	beq.n	8005e2c <__pow5mult+0x90>
 8005dc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dc2:	b93c      	cbnz	r4, 8005dd4 <__pow5mult+0x38>
 8005dc4:	2010      	movs	r0, #16
 8005dc6:	f7ff fe55 	bl	8005a74 <malloc>
 8005dca:	6270      	str	r0, [r6, #36]	; 0x24
 8005dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd0:	6004      	str	r4, [r0, #0]
 8005dd2:	60c4      	str	r4, [r0, #12]
 8005dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ddc:	b94c      	cbnz	r4, 8005df2 <__pow5mult+0x56>
 8005dde:	f240 2171 	movw	r1, #625	; 0x271
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ff3b 	bl	8005c5e <__i2b>
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	f8c8 0008 	str.w	r0, [r8, #8]
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	f04f 0800 	mov.w	r8, #0
 8005df6:	07eb      	lsls	r3, r5, #31
 8005df8:	d50a      	bpl.n	8005e10 <__pow5mult+0x74>
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ff36 	bl	8005c70 <__multiply>
 8005e04:	4681      	mov	r9, r0
 8005e06:	4639      	mov	r1, r7
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fe88 	bl	8005b1e <_Bfree>
 8005e0e:	464f      	mov	r7, r9
 8005e10:	106d      	asrs	r5, r5, #1
 8005e12:	d00b      	beq.n	8005e2c <__pow5mult+0x90>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	b938      	cbnz	r0, 8005e28 <__pow5mult+0x8c>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ff27 	bl	8005c70 <__multiply>
 8005e22:	6020      	str	r0, [r4, #0]
 8005e24:	f8c0 8000 	str.w	r8, [r0]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	e7e4      	b.n	8005df6 <__pow5mult+0x5a>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e32:	bf00      	nop
 8005e34:	08006740 	.word	0x08006740

08005e38 <__lshift>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4607      	mov	r7, r0
 8005e40:	4616      	mov	r6, r2
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e48:	eb0a 0903 	add.w	r9, sl, r3
 8005e4c:	6849      	ldr	r1, [r1, #4]
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	f109 0501 	add.w	r5, r9, #1
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	db32      	blt.n	8005ebe <__lshift+0x86>
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff fe2c 	bl	8005ab6 <_Balloc>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4680      	mov	r8, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	f100 0114 	add.w	r1, r0, #20
 8005e68:	4553      	cmp	r3, sl
 8005e6a:	db2b      	blt.n	8005ec4 <__lshift+0x8c>
 8005e6c:	6920      	ldr	r0, [r4, #16]
 8005e6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e72:	f104 0314 	add.w	r3, r4, #20
 8005e76:	f016 021f 	ands.w	r2, r6, #31
 8005e7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e82:	d025      	beq.n	8005ed0 <__lshift+0x98>
 8005e84:	2000      	movs	r0, #0
 8005e86:	f1c2 0e20 	rsb	lr, r2, #32
 8005e8a:	468a      	mov	sl, r1
 8005e8c:	681e      	ldr	r6, [r3, #0]
 8005e8e:	4096      	lsls	r6, r2
 8005e90:	4330      	orrs	r0, r6
 8005e92:	f84a 0b04 	str.w	r0, [sl], #4
 8005e96:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e9a:	459c      	cmp	ip, r3
 8005e9c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ea0:	d814      	bhi.n	8005ecc <__lshift+0x94>
 8005ea2:	6048      	str	r0, [r1, #4]
 8005ea4:	b108      	cbz	r0, 8005eaa <__lshift+0x72>
 8005ea6:	f109 0502 	add.w	r5, r9, #2
 8005eaa:	3d01      	subs	r5, #1
 8005eac:	4638      	mov	r0, r7
 8005eae:	f8c8 5010 	str.w	r5, [r8, #16]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	f7ff fe33 	bl	8005b1e <_Bfree>
 8005eb8:	4640      	mov	r0, r8
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	3101      	adds	r1, #1
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	e7c7      	b.n	8005e54 <__lshift+0x1c>
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e7cd      	b.n	8005e68 <__lshift+0x30>
 8005ecc:	4651      	mov	r1, sl
 8005ece:	e7dc      	b.n	8005e8a <__lshift+0x52>
 8005ed0:	3904      	subs	r1, #4
 8005ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed6:	459c      	cmp	ip, r3
 8005ed8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005edc:	d8f9      	bhi.n	8005ed2 <__lshift+0x9a>
 8005ede:	e7e4      	b.n	8005eaa <__lshift+0x72>

08005ee0 <__mcmp>:
 8005ee0:	6903      	ldr	r3, [r0, #16]
 8005ee2:	690a      	ldr	r2, [r1, #16]
 8005ee4:	b530      	push	{r4, r5, lr}
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	d10c      	bne.n	8005f04 <__mcmp+0x24>
 8005eea:	0092      	lsls	r2, r2, #2
 8005eec:	3014      	adds	r0, #20
 8005eee:	3114      	adds	r1, #20
 8005ef0:	1884      	adds	r4, r0, r2
 8005ef2:	4411      	add	r1, r2
 8005ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005efc:	4295      	cmp	r5, r2
 8005efe:	d003      	beq.n	8005f08 <__mcmp+0x28>
 8005f00:	d305      	bcc.n	8005f0e <__mcmp+0x2e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d3f3      	bcc.n	8005ef4 <__mcmp+0x14>
 8005f0c:	e7fa      	b.n	8005f04 <__mcmp+0x24>
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	e7f7      	b.n	8005f04 <__mcmp+0x24>

08005f14 <__mdiff>:
 8005f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	460d      	mov	r5, r1
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4614      	mov	r4, r2
 8005f22:	f7ff ffdd 	bl	8005ee0 <__mcmp>
 8005f26:	1e06      	subs	r6, r0, #0
 8005f28:	d108      	bne.n	8005f3c <__mdiff+0x28>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff fdc2 	bl	8005ab6 <_Balloc>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3c:	bfa4      	itt	ge
 8005f3e:	4623      	movge	r3, r4
 8005f40:	462c      	movge	r4, r5
 8005f42:	4638      	mov	r0, r7
 8005f44:	6861      	ldr	r1, [r4, #4]
 8005f46:	bfa6      	itte	ge
 8005f48:	461d      	movge	r5, r3
 8005f4a:	2600      	movge	r6, #0
 8005f4c:	2601      	movlt	r6, #1
 8005f4e:	f7ff fdb2 	bl	8005ab6 <_Balloc>
 8005f52:	f04f 0e00 	mov.w	lr, #0
 8005f56:	60c6      	str	r6, [r0, #12]
 8005f58:	692b      	ldr	r3, [r5, #16]
 8005f5a:	6926      	ldr	r6, [r4, #16]
 8005f5c:	f104 0214 	add.w	r2, r4, #20
 8005f60:	f105 0914 	add.w	r9, r5, #20
 8005f64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f6c:	f100 0114 	add.w	r1, r0, #20
 8005f70:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f74:	f859 5b04 	ldr.w	r5, [r9], #4
 8005f78:	fa1f f38a 	uxth.w	r3, sl
 8005f7c:	4473      	add	r3, lr
 8005f7e:	b2ac      	uxth	r4, r5
 8005f80:	1b1b      	subs	r3, r3, r4
 8005f82:	0c2c      	lsrs	r4, r5, #16
 8005f84:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005f88:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005f92:	45c8      	cmp	r8, r9
 8005f94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005f98:	4694      	mov	ip, r2
 8005f9a:	f841 4b04 	str.w	r4, [r1], #4
 8005f9e:	d8e7      	bhi.n	8005f70 <__mdiff+0x5c>
 8005fa0:	45bc      	cmp	ip, r7
 8005fa2:	d304      	bcc.n	8005fae <__mdiff+0x9a>
 8005fa4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fa8:	b183      	cbz	r3, 8005fcc <__mdiff+0xb8>
 8005faa:	6106      	str	r6, [r0, #16]
 8005fac:	e7c4      	b.n	8005f38 <__mdiff+0x24>
 8005fae:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005fb2:	b2a2      	uxth	r2, r4
 8005fb4:	4472      	add	r2, lr
 8005fb6:	1413      	asrs	r3, r2, #16
 8005fb8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005fbc:	b292      	uxth	r2, r2
 8005fbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005fc2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005fc6:	f841 2b04 	str.w	r2, [r1], #4
 8005fca:	e7e9      	b.n	8005fa0 <__mdiff+0x8c>
 8005fcc:	3e01      	subs	r6, #1
 8005fce:	e7e9      	b.n	8005fa4 <__mdiff+0x90>

08005fd0 <__d2b>:
 8005fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fd4:	461c      	mov	r4, r3
 8005fd6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4690      	mov	r8, r2
 8005fde:	f7ff fd6a 	bl	8005ab6 <_Balloc>
 8005fe2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005fe6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005fea:	4607      	mov	r7, r0
 8005fec:	bb34      	cbnz	r4, 800603c <__d2b+0x6c>
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	f1b8 0200 	subs.w	r2, r8, #0
 8005ff4:	d027      	beq.n	8006046 <__d2b+0x76>
 8005ff6:	a802      	add	r0, sp, #8
 8005ff8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005ffc:	f7ff fe00 	bl	8005c00 <__lo0bits>
 8006000:	9900      	ldr	r1, [sp, #0]
 8006002:	b1f0      	cbz	r0, 8006042 <__d2b+0x72>
 8006004:	9a01      	ldr	r2, [sp, #4]
 8006006:	f1c0 0320 	rsb	r3, r0, #32
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	430b      	orrs	r3, r1
 8006010:	40c2      	lsrs	r2, r0
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2102      	movne	r1, #2
 800601e:	2101      	moveq	r1, #1
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	6139      	str	r1, [r7, #16]
 8006024:	b1c4      	cbz	r4, 8006058 <__d2b+0x88>
 8006026:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800602a:	4404      	add	r4, r0
 800602c:	6034      	str	r4, [r6, #0]
 800602e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	4638      	mov	r0, r7
 8006036:	b002      	add	sp, #8
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006040:	e7d5      	b.n	8005fee <__d2b+0x1e>
 8006042:	6179      	str	r1, [r7, #20]
 8006044:	e7e7      	b.n	8006016 <__d2b+0x46>
 8006046:	a801      	add	r0, sp, #4
 8006048:	f7ff fdda 	bl	8005c00 <__lo0bits>
 800604c:	2101      	movs	r1, #1
 800604e:	9b01      	ldr	r3, [sp, #4]
 8006050:	6139      	str	r1, [r7, #16]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	3020      	adds	r0, #32
 8006056:	e7e5      	b.n	8006024 <__d2b+0x54>
 8006058:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800605c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006060:	6030      	str	r0, [r6, #0]
 8006062:	6918      	ldr	r0, [r3, #16]
 8006064:	f7ff fdad 	bl	8005bc2 <__hi0bits>
 8006068:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800606c:	e7e1      	b.n	8006032 <__d2b+0x62>

0800606e <_calloc_r>:
 800606e:	b538      	push	{r3, r4, r5, lr}
 8006070:	fb02 f401 	mul.w	r4, r2, r1
 8006074:	4621      	mov	r1, r4
 8006076:	f000 f855 	bl	8006124 <_malloc_r>
 800607a:	4605      	mov	r5, r0
 800607c:	b118      	cbz	r0, 8006086 <_calloc_r+0x18>
 800607e:	4622      	mov	r2, r4
 8006080:	2100      	movs	r1, #0
 8006082:	f7fe fa25 	bl	80044d0 <memset>
 8006086:	4628      	mov	r0, r5
 8006088:	bd38      	pop	{r3, r4, r5, pc}
	...

0800608c <_free_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4605      	mov	r5, r0
 8006090:	2900      	cmp	r1, #0
 8006092:	d043      	beq.n	800611c <_free_r+0x90>
 8006094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006098:	1f0c      	subs	r4, r1, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	bfb8      	it	lt
 800609e:	18e4      	addlt	r4, r4, r3
 80060a0:	f000 fa27 	bl	80064f2 <__malloc_lock>
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <_free_r+0x94>)
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	4610      	mov	r0, r2
 80060aa:	b933      	cbnz	r3, 80060ba <_free_r+0x2e>
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	6014      	str	r4, [r2, #0]
 80060b0:	4628      	mov	r0, r5
 80060b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060b6:	f000 ba1d 	b.w	80064f4 <__malloc_unlock>
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	d90b      	bls.n	80060d6 <_free_r+0x4a>
 80060be:	6821      	ldr	r1, [r4, #0]
 80060c0:	1862      	adds	r2, r4, r1
 80060c2:	4293      	cmp	r3, r2
 80060c4:	bf01      	itttt	eq
 80060c6:	681a      	ldreq	r2, [r3, #0]
 80060c8:	685b      	ldreq	r3, [r3, #4]
 80060ca:	1852      	addeq	r2, r2, r1
 80060cc:	6022      	streq	r2, [r4, #0]
 80060ce:	6063      	str	r3, [r4, #4]
 80060d0:	6004      	str	r4, [r0, #0]
 80060d2:	e7ed      	b.n	80060b0 <_free_r+0x24>
 80060d4:	4613      	mov	r3, r2
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	b10a      	cbz	r2, 80060de <_free_r+0x52>
 80060da:	42a2      	cmp	r2, r4
 80060dc:	d9fa      	bls.n	80060d4 <_free_r+0x48>
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	1858      	adds	r0, r3, r1
 80060e2:	42a0      	cmp	r0, r4
 80060e4:	d10b      	bne.n	80060fe <_free_r+0x72>
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	4401      	add	r1, r0
 80060ea:	1858      	adds	r0, r3, r1
 80060ec:	4282      	cmp	r2, r0
 80060ee:	6019      	str	r1, [r3, #0]
 80060f0:	d1de      	bne.n	80060b0 <_free_r+0x24>
 80060f2:	6810      	ldr	r0, [r2, #0]
 80060f4:	6852      	ldr	r2, [r2, #4]
 80060f6:	4401      	add	r1, r0
 80060f8:	6019      	str	r1, [r3, #0]
 80060fa:	605a      	str	r2, [r3, #4]
 80060fc:	e7d8      	b.n	80060b0 <_free_r+0x24>
 80060fe:	d902      	bls.n	8006106 <_free_r+0x7a>
 8006100:	230c      	movs	r3, #12
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	e7d4      	b.n	80060b0 <_free_r+0x24>
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	1821      	adds	r1, r4, r0
 800610a:	428a      	cmp	r2, r1
 800610c:	bf01      	itttt	eq
 800610e:	6811      	ldreq	r1, [r2, #0]
 8006110:	6852      	ldreq	r2, [r2, #4]
 8006112:	1809      	addeq	r1, r1, r0
 8006114:	6021      	streq	r1, [r4, #0]
 8006116:	6062      	str	r2, [r4, #4]
 8006118:	605c      	str	r4, [r3, #4]
 800611a:	e7c9      	b.n	80060b0 <_free_r+0x24>
 800611c:	bd38      	pop	{r3, r4, r5, pc}
 800611e:	bf00      	nop
 8006120:	20000214 	.word	0x20000214

08006124 <_malloc_r>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	1ccd      	adds	r5, r1, #3
 8006128:	f025 0503 	bic.w	r5, r5, #3
 800612c:	3508      	adds	r5, #8
 800612e:	2d0c      	cmp	r5, #12
 8006130:	bf38      	it	cc
 8006132:	250c      	movcc	r5, #12
 8006134:	2d00      	cmp	r5, #0
 8006136:	4606      	mov	r6, r0
 8006138:	db01      	blt.n	800613e <_malloc_r+0x1a>
 800613a:	42a9      	cmp	r1, r5
 800613c:	d903      	bls.n	8006146 <_malloc_r+0x22>
 800613e:	230c      	movs	r3, #12
 8006140:	6033      	str	r3, [r6, #0]
 8006142:	2000      	movs	r0, #0
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	f000 f9d4 	bl	80064f2 <__malloc_lock>
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <_malloc_r+0xac>)
 800614c:	6814      	ldr	r4, [r2, #0]
 800614e:	4621      	mov	r1, r4
 8006150:	b991      	cbnz	r1, 8006178 <_malloc_r+0x54>
 8006152:	4c20      	ldr	r4, [pc, #128]	; (80061d4 <_malloc_r+0xb0>)
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	b91b      	cbnz	r3, 8006160 <_malloc_r+0x3c>
 8006158:	4630      	mov	r0, r6
 800615a:	f000 f98f 	bl	800647c <_sbrk_r>
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	4629      	mov	r1, r5
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f98a 	bl	800647c <_sbrk_r>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d124      	bne.n	80061b6 <_malloc_r+0x92>
 800616c:	230c      	movs	r3, #12
 800616e:	4630      	mov	r0, r6
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	f000 f9bf 	bl	80064f4 <__malloc_unlock>
 8006176:	e7e4      	b.n	8006142 <_malloc_r+0x1e>
 8006178:	680b      	ldr	r3, [r1, #0]
 800617a:	1b5b      	subs	r3, r3, r5
 800617c:	d418      	bmi.n	80061b0 <_malloc_r+0x8c>
 800617e:	2b0b      	cmp	r3, #11
 8006180:	d90f      	bls.n	80061a2 <_malloc_r+0x7e>
 8006182:	600b      	str	r3, [r1, #0]
 8006184:	18cc      	adds	r4, r1, r3
 8006186:	50cd      	str	r5, [r1, r3]
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f9b3 	bl	80064f4 <__malloc_unlock>
 800618e:	f104 000b 	add.w	r0, r4, #11
 8006192:	1d23      	adds	r3, r4, #4
 8006194:	f020 0007 	bic.w	r0, r0, #7
 8006198:	1ac3      	subs	r3, r0, r3
 800619a:	d0d3      	beq.n	8006144 <_malloc_r+0x20>
 800619c:	425a      	negs	r2, r3
 800619e:	50e2      	str	r2, [r4, r3]
 80061a0:	e7d0      	b.n	8006144 <_malloc_r+0x20>
 80061a2:	684b      	ldr	r3, [r1, #4]
 80061a4:	428c      	cmp	r4, r1
 80061a6:	bf16      	itet	ne
 80061a8:	6063      	strne	r3, [r4, #4]
 80061aa:	6013      	streq	r3, [r2, #0]
 80061ac:	460c      	movne	r4, r1
 80061ae:	e7eb      	b.n	8006188 <_malloc_r+0x64>
 80061b0:	460c      	mov	r4, r1
 80061b2:	6849      	ldr	r1, [r1, #4]
 80061b4:	e7cc      	b.n	8006150 <_malloc_r+0x2c>
 80061b6:	1cc4      	adds	r4, r0, #3
 80061b8:	f024 0403 	bic.w	r4, r4, #3
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d005      	beq.n	80061cc <_malloc_r+0xa8>
 80061c0:	1a21      	subs	r1, r4, r0
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f95a 	bl	800647c <_sbrk_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0cf      	beq.n	800616c <_malloc_r+0x48>
 80061cc:	6025      	str	r5, [r4, #0]
 80061ce:	e7db      	b.n	8006188 <_malloc_r+0x64>
 80061d0:	20000214 	.word	0x20000214
 80061d4:	20000218 	.word	0x20000218

080061d8 <__ssputs_r>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	688e      	ldr	r6, [r1, #8]
 80061de:	4682      	mov	sl, r0
 80061e0:	429e      	cmp	r6, r3
 80061e2:	460c      	mov	r4, r1
 80061e4:	4690      	mov	r8, r2
 80061e6:	4699      	mov	r9, r3
 80061e8:	d837      	bhi.n	800625a <__ssputs_r+0x82>
 80061ea:	898a      	ldrh	r2, [r1, #12]
 80061ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061f0:	d031      	beq.n	8006256 <__ssputs_r+0x7e>
 80061f2:	2302      	movs	r3, #2
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	6909      	ldr	r1, [r1, #16]
 80061f8:	1a6f      	subs	r7, r5, r1
 80061fa:	6965      	ldr	r5, [r4, #20]
 80061fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006200:	fb95 f5f3 	sdiv	r5, r5, r3
 8006204:	f109 0301 	add.w	r3, r9, #1
 8006208:	443b      	add	r3, r7
 800620a:	429d      	cmp	r5, r3
 800620c:	bf38      	it	cc
 800620e:	461d      	movcc	r5, r3
 8006210:	0553      	lsls	r3, r2, #21
 8006212:	d530      	bpl.n	8006276 <__ssputs_r+0x9e>
 8006214:	4629      	mov	r1, r5
 8006216:	f7ff ff85 	bl	8006124 <_malloc_r>
 800621a:	4606      	mov	r6, r0
 800621c:	b950      	cbnz	r0, 8006234 <__ssputs_r+0x5c>
 800621e:	230c      	movs	r3, #12
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	f8ca 3000 	str.w	r3, [sl]
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006234:	463a      	mov	r2, r7
 8006236:	6921      	ldr	r1, [r4, #16]
 8006238:	f7ff fc32 	bl	8005aa0 <memcpy>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	6126      	str	r6, [r4, #16]
 800624a:	443e      	add	r6, r7
 800624c:	6026      	str	r6, [r4, #0]
 800624e:	464e      	mov	r6, r9
 8006250:	6165      	str	r5, [r4, #20]
 8006252:	1bed      	subs	r5, r5, r7
 8006254:	60a5      	str	r5, [r4, #8]
 8006256:	454e      	cmp	r6, r9
 8006258:	d900      	bls.n	800625c <__ssputs_r+0x84>
 800625a:	464e      	mov	r6, r9
 800625c:	4632      	mov	r2, r6
 800625e:	4641      	mov	r1, r8
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	f000 f92d 	bl	80064c0 <memmove>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	2000      	movs	r0, #0
 800626a:	1b9b      	subs	r3, r3, r6
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	441e      	add	r6, r3
 8006272:	6026      	str	r6, [r4, #0]
 8006274:	e7dc      	b.n	8006230 <__ssputs_r+0x58>
 8006276:	462a      	mov	r2, r5
 8006278:	f000 f93d 	bl	80064f6 <_realloc_r>
 800627c:	4606      	mov	r6, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d1e2      	bne.n	8006248 <__ssputs_r+0x70>
 8006282:	6921      	ldr	r1, [r4, #16]
 8006284:	4650      	mov	r0, sl
 8006286:	f7ff ff01 	bl	800608c <_free_r>
 800628a:	e7c8      	b.n	800621e <__ssputs_r+0x46>

0800628c <_svfiprintf_r>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	461d      	mov	r5, r3
 8006292:	898b      	ldrh	r3, [r1, #12]
 8006294:	b09d      	sub	sp, #116	; 0x74
 8006296:	061f      	lsls	r7, r3, #24
 8006298:	4680      	mov	r8, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4616      	mov	r6, r2
 800629e:	d50f      	bpl.n	80062c0 <_svfiprintf_r+0x34>
 80062a0:	690b      	ldr	r3, [r1, #16]
 80062a2:	b96b      	cbnz	r3, 80062c0 <_svfiprintf_r+0x34>
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	f7ff ff3d 	bl	8006124 <_malloc_r>
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	6120      	str	r0, [r4, #16]
 80062ae:	b928      	cbnz	r0, 80062bc <_svfiprintf_r+0x30>
 80062b0:	230c      	movs	r3, #12
 80062b2:	f8c8 3000 	str.w	r3, [r8]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	e0c8      	b.n	800644e <_svfiprintf_r+0x1c2>
 80062bc:	2340      	movs	r3, #64	; 0x40
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	2300      	movs	r3, #0
 80062c2:	9309      	str	r3, [sp, #36]	; 0x24
 80062c4:	2320      	movs	r3, #32
 80062c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ca:	2330      	movs	r3, #48	; 0x30
 80062cc:	f04f 0b01 	mov.w	fp, #1
 80062d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062d4:	9503      	str	r5, [sp, #12]
 80062d6:	4637      	mov	r7, r6
 80062d8:	463d      	mov	r5, r7
 80062da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062de:	b10b      	cbz	r3, 80062e4 <_svfiprintf_r+0x58>
 80062e0:	2b25      	cmp	r3, #37	; 0x25
 80062e2:	d13e      	bne.n	8006362 <_svfiprintf_r+0xd6>
 80062e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80062e8:	d00b      	beq.n	8006302 <_svfiprintf_r+0x76>
 80062ea:	4653      	mov	r3, sl
 80062ec:	4632      	mov	r2, r6
 80062ee:	4621      	mov	r1, r4
 80062f0:	4640      	mov	r0, r8
 80062f2:	f7ff ff71 	bl	80061d8 <__ssputs_r>
 80062f6:	3001      	adds	r0, #1
 80062f8:	f000 80a4 	beq.w	8006444 <_svfiprintf_r+0x1b8>
 80062fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fe:	4453      	add	r3, sl
 8006300:	9309      	str	r3, [sp, #36]	; 0x24
 8006302:	783b      	ldrb	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 809d 	beq.w	8006444 <_svfiprintf_r+0x1b8>
 800630a:	2300      	movs	r3, #0
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631c:	931a      	str	r3, [sp, #104]	; 0x68
 800631e:	462f      	mov	r7, r5
 8006320:	2205      	movs	r2, #5
 8006322:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006326:	4850      	ldr	r0, [pc, #320]	; (8006468 <_svfiprintf_r+0x1dc>)
 8006328:	f7ff fbac 	bl	8005a84 <memchr>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	b9d0      	cbnz	r0, 8006366 <_svfiprintf_r+0xda>
 8006330:	06d9      	lsls	r1, r3, #27
 8006332:	bf44      	itt	mi
 8006334:	2220      	movmi	r2, #32
 8006336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800633a:	071a      	lsls	r2, r3, #28
 800633c:	bf44      	itt	mi
 800633e:	222b      	movmi	r2, #43	; 0x2b
 8006340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006344:	782a      	ldrb	r2, [r5, #0]
 8006346:	2a2a      	cmp	r2, #42	; 0x2a
 8006348:	d015      	beq.n	8006376 <_svfiprintf_r+0xea>
 800634a:	462f      	mov	r7, r5
 800634c:	2000      	movs	r0, #0
 800634e:	250a      	movs	r5, #10
 8006350:	9a07      	ldr	r2, [sp, #28]
 8006352:	4639      	mov	r1, r7
 8006354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006358:	3b30      	subs	r3, #48	; 0x30
 800635a:	2b09      	cmp	r3, #9
 800635c:	d94d      	bls.n	80063fa <_svfiprintf_r+0x16e>
 800635e:	b1b8      	cbz	r0, 8006390 <_svfiprintf_r+0x104>
 8006360:	e00f      	b.n	8006382 <_svfiprintf_r+0xf6>
 8006362:	462f      	mov	r7, r5
 8006364:	e7b8      	b.n	80062d8 <_svfiprintf_r+0x4c>
 8006366:	4a40      	ldr	r2, [pc, #256]	; (8006468 <_svfiprintf_r+0x1dc>)
 8006368:	463d      	mov	r5, r7
 800636a:	1a80      	subs	r0, r0, r2
 800636c:	fa0b f000 	lsl.w	r0, fp, r0
 8006370:	4318      	orrs	r0, r3
 8006372:	9004      	str	r0, [sp, #16]
 8006374:	e7d3      	b.n	800631e <_svfiprintf_r+0x92>
 8006376:	9a03      	ldr	r2, [sp, #12]
 8006378:	1d11      	adds	r1, r2, #4
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2a00      	cmp	r2, #0
 8006380:	db01      	blt.n	8006386 <_svfiprintf_r+0xfa>
 8006382:	9207      	str	r2, [sp, #28]
 8006384:	e004      	b.n	8006390 <_svfiprintf_r+0x104>
 8006386:	4252      	negs	r2, r2
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	9207      	str	r2, [sp, #28]
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	783b      	ldrb	r3, [r7, #0]
 8006392:	2b2e      	cmp	r3, #46	; 0x2e
 8006394:	d10c      	bne.n	80063b0 <_svfiprintf_r+0x124>
 8006396:	787b      	ldrb	r3, [r7, #1]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d133      	bne.n	8006404 <_svfiprintf_r+0x178>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	3702      	adds	r7, #2
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	4d2e      	ldr	r5, [pc, #184]	; (800646c <_svfiprintf_r+0x1e0>)
 80063b2:	2203      	movs	r2, #3
 80063b4:	7839      	ldrb	r1, [r7, #0]
 80063b6:	4628      	mov	r0, r5
 80063b8:	f7ff fb64 	bl	8005a84 <memchr>
 80063bc:	b138      	cbz	r0, 80063ce <_svfiprintf_r+0x142>
 80063be:	2340      	movs	r3, #64	; 0x40
 80063c0:	1b40      	subs	r0, r0, r5
 80063c2:	fa03 f000 	lsl.w	r0, r3, r0
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	3701      	adds	r7, #1
 80063ca:	4303      	orrs	r3, r0
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	7839      	ldrb	r1, [r7, #0]
 80063d0:	2206      	movs	r2, #6
 80063d2:	4827      	ldr	r0, [pc, #156]	; (8006470 <_svfiprintf_r+0x1e4>)
 80063d4:	1c7e      	adds	r6, r7, #1
 80063d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063da:	f7ff fb53 	bl	8005a84 <memchr>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d038      	beq.n	8006454 <_svfiprintf_r+0x1c8>
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <_svfiprintf_r+0x1e8>)
 80063e4:	bb13      	cbnz	r3, 800642c <_svfiprintf_r+0x1a0>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	3308      	adds	r3, #8
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	444b      	add	r3, r9
 80063f6:	9309      	str	r3, [sp, #36]	; 0x24
 80063f8:	e76d      	b.n	80062d6 <_svfiprintf_r+0x4a>
 80063fa:	fb05 3202 	mla	r2, r5, r2, r3
 80063fe:	2001      	movs	r0, #1
 8006400:	460f      	mov	r7, r1
 8006402:	e7a6      	b.n	8006352 <_svfiprintf_r+0xc6>
 8006404:	2300      	movs	r3, #0
 8006406:	250a      	movs	r5, #10
 8006408:	4619      	mov	r1, r3
 800640a:	3701      	adds	r7, #1
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	4638      	mov	r0, r7
 8006410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006414:	3a30      	subs	r2, #48	; 0x30
 8006416:	2a09      	cmp	r2, #9
 8006418:	d903      	bls.n	8006422 <_svfiprintf_r+0x196>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c8      	beq.n	80063b0 <_svfiprintf_r+0x124>
 800641e:	9105      	str	r1, [sp, #20]
 8006420:	e7c6      	b.n	80063b0 <_svfiprintf_r+0x124>
 8006422:	fb05 2101 	mla	r1, r5, r1, r2
 8006426:	2301      	movs	r3, #1
 8006428:	4607      	mov	r7, r0
 800642a:	e7f0      	b.n	800640e <_svfiprintf_r+0x182>
 800642c:	ab03      	add	r3, sp, #12
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4622      	mov	r2, r4
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <_svfiprintf_r+0x1ec>)
 8006434:	a904      	add	r1, sp, #16
 8006436:	4640      	mov	r0, r8
 8006438:	f7fe f8e4 	bl	8004604 <_printf_float>
 800643c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006440:	4681      	mov	r9, r0
 8006442:	d1d6      	bne.n	80063f2 <_svfiprintf_r+0x166>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	065b      	lsls	r3, r3, #25
 8006448:	f53f af35 	bmi.w	80062b6 <_svfiprintf_r+0x2a>
 800644c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800644e:	b01d      	add	sp, #116	; 0x74
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	ab03      	add	r3, sp, #12
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4622      	mov	r2, r4
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <_svfiprintf_r+0x1ec>)
 800645c:	a904      	add	r1, sp, #16
 800645e:	4640      	mov	r0, r8
 8006460:	f7fe fb7c 	bl	8004b5c <_printf_i>
 8006464:	e7ea      	b.n	800643c <_svfiprintf_r+0x1b0>
 8006466:	bf00      	nop
 8006468:	0800674c 	.word	0x0800674c
 800646c:	08006752 	.word	0x08006752
 8006470:	08006756 	.word	0x08006756
 8006474:	08004605 	.word	0x08004605
 8006478:	080061d9 	.word	0x080061d9

0800647c <_sbrk_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	2300      	movs	r3, #0
 8006480:	4c05      	ldr	r4, [pc, #20]	; (8006498 <_sbrk_r+0x1c>)
 8006482:	4605      	mov	r5, r0
 8006484:	4608      	mov	r0, r1
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	f7fb faf2 	bl	8001a70 <_sbrk>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_sbrk_r+0x1a>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	b103      	cbz	r3, 8006496 <_sbrk_r+0x1a>
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	2000032c 	.word	0x2000032c

0800649c <__ascii_mbtowc>:
 800649c:	b082      	sub	sp, #8
 800649e:	b901      	cbnz	r1, 80064a2 <__ascii_mbtowc+0x6>
 80064a0:	a901      	add	r1, sp, #4
 80064a2:	b142      	cbz	r2, 80064b6 <__ascii_mbtowc+0x1a>
 80064a4:	b14b      	cbz	r3, 80064ba <__ascii_mbtowc+0x1e>
 80064a6:	7813      	ldrb	r3, [r2, #0]
 80064a8:	600b      	str	r3, [r1, #0]
 80064aa:	7812      	ldrb	r2, [r2, #0]
 80064ac:	1c10      	adds	r0, r2, #0
 80064ae:	bf18      	it	ne
 80064b0:	2001      	movne	r0, #1
 80064b2:	b002      	add	sp, #8
 80064b4:	4770      	bx	lr
 80064b6:	4610      	mov	r0, r2
 80064b8:	e7fb      	b.n	80064b2 <__ascii_mbtowc+0x16>
 80064ba:	f06f 0001 	mvn.w	r0, #1
 80064be:	e7f8      	b.n	80064b2 <__ascii_mbtowc+0x16>

080064c0 <memmove>:
 80064c0:	4288      	cmp	r0, r1
 80064c2:	b510      	push	{r4, lr}
 80064c4:	eb01 0302 	add.w	r3, r1, r2
 80064c8:	d807      	bhi.n	80064da <memmove+0x1a>
 80064ca:	1e42      	subs	r2, r0, #1
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d00a      	beq.n	80064e6 <memmove+0x26>
 80064d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80064d8:	e7f8      	b.n	80064cc <memmove+0xc>
 80064da:	4283      	cmp	r3, r0
 80064dc:	d9f5      	bls.n	80064ca <memmove+0xa>
 80064de:	1881      	adds	r1, r0, r2
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	42d3      	cmn	r3, r2
 80064e4:	d100      	bne.n	80064e8 <memmove+0x28>
 80064e6:	bd10      	pop	{r4, pc}
 80064e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80064f0:	e7f7      	b.n	80064e2 <memmove+0x22>

080064f2 <__malloc_lock>:
 80064f2:	4770      	bx	lr

080064f4 <__malloc_unlock>:
 80064f4:	4770      	bx	lr

080064f6 <_realloc_r>:
 80064f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f8:	4607      	mov	r7, r0
 80064fa:	4614      	mov	r4, r2
 80064fc:	460e      	mov	r6, r1
 80064fe:	b921      	cbnz	r1, 800650a <_realloc_r+0x14>
 8006500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006504:	4611      	mov	r1, r2
 8006506:	f7ff be0d 	b.w	8006124 <_malloc_r>
 800650a:	b922      	cbnz	r2, 8006516 <_realloc_r+0x20>
 800650c:	f7ff fdbe 	bl	800608c <_free_r>
 8006510:	4625      	mov	r5, r4
 8006512:	4628      	mov	r0, r5
 8006514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006516:	f000 f821 	bl	800655c <_malloc_usable_size_r>
 800651a:	42a0      	cmp	r0, r4
 800651c:	d20f      	bcs.n	800653e <_realloc_r+0x48>
 800651e:	4621      	mov	r1, r4
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff fdff 	bl	8006124 <_malloc_r>
 8006526:	4605      	mov	r5, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	d0f2      	beq.n	8006512 <_realloc_r+0x1c>
 800652c:	4631      	mov	r1, r6
 800652e:	4622      	mov	r2, r4
 8006530:	f7ff fab6 	bl	8005aa0 <memcpy>
 8006534:	4631      	mov	r1, r6
 8006536:	4638      	mov	r0, r7
 8006538:	f7ff fda8 	bl	800608c <_free_r>
 800653c:	e7e9      	b.n	8006512 <_realloc_r+0x1c>
 800653e:	4635      	mov	r5, r6
 8006540:	e7e7      	b.n	8006512 <_realloc_r+0x1c>

08006542 <__ascii_wctomb>:
 8006542:	b149      	cbz	r1, 8006558 <__ascii_wctomb+0x16>
 8006544:	2aff      	cmp	r2, #255	; 0xff
 8006546:	bf8b      	itete	hi
 8006548:	238a      	movhi	r3, #138	; 0x8a
 800654a:	700a      	strbls	r2, [r1, #0]
 800654c:	6003      	strhi	r3, [r0, #0]
 800654e:	2001      	movls	r0, #1
 8006550:	bf88      	it	hi
 8006552:	f04f 30ff 	movhi.w	r0, #4294967295
 8006556:	4770      	bx	lr
 8006558:	4608      	mov	r0, r1
 800655a:	4770      	bx	lr

0800655c <_malloc_usable_size_r>:
 800655c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006560:	1f18      	subs	r0, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfbc      	itt	lt
 8006566:	580b      	ldrlt	r3, [r1, r0]
 8006568:	18c0      	addlt	r0, r0, r3
 800656a:	4770      	bx	lr

0800656c <_init>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr

08006578 <_fini>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr
